<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081226112534" xml:lang="en-CA">
	<title>Drawbacks</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
		<section>
			<p>Nothing is perfect, so JavaBuilders have weak points too.
			</p>
			<p>
				<ul>
					<li>Lose some of the static, compile-time safety: since you are
						defining all the layouts/event wiring in a YAML text file, some of
						the referenced objects may have a different name that their
						corresponding equivalents in the Java file, especially if using
						refactoring. This can be overcome with the @Alias annotation,
						which hardcodes a link between a Java-side object and its
						definition in the YAML file.</li>
					<li>No code completion (at least not yet). YAML is just a pure
						text file. You won't know what the known properties are for any
						particular object type unless you know them already. But in most
						cases it's the basic ones: name, text, onAction, onClicked, etc.
					</li>
					<li>You have to get acquainted with YAML...sorry, can't help you
						there. Sometimes we just need to learn new things. The bottom line
						though is that all your code stays in Java, YAML is just used for
						declarative UI building.</li>
				</ul>
			</p>
			<p>On the upside, UI components built with JavaBuilders are easily unit testable.
			You just need to do <codeph>new MyComponent()</codeph> in your unit test, that's all.
			When an object is built, the JavaBuilder automatically validates that not only
			the properties are defined correctly, but also all the event listeners point to
			actual existing methods in the Java class. If not, a <apiname>BuildException</apiname>
			will be thrown right away.</p>
		</section>
		
	</body>
</topic>