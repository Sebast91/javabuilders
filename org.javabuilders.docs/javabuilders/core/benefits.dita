<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081226112020" xml:lang="en-CA">
	<title>Benefits</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
	<section>
		<title>What are the benefits compared to coding by hand?</title>
		<p>You have to write a lot less code. JavaBuilders introduces dynamic language-level productivity (think Ruby/Groovy) to Java. 
		See this typical Java Swing example: 
		<codeblock>
ResourceBundle bundle = ResourceBundle.getBundle("Resources");

JButton button = new JButton();
button.setName("okButton");
button.setText(bundle.getString("button.ok"));
button.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
                //execute the save method
                save();
        }
        
});		
		</codeblock>
		The equivalent compact YAML content would be just: 
		<codeblock>
JButton(name=okButton,text=button.ok,onAction=save)		
		</codeblock>
		and all you need to build this Swing Java class from this YAML file is this single line
		of code somewhere in your constructor:
		<codeblock>
SwingJavaBuilder.build(this);
		</codeblock>
		The equivalent code for any other UI toolkit (e.g. SWTJavaBuilder) would be just as compact.
		</p>
	</section>
	<section>
		<title>What are the benefits compared to using GUI Builders, such as NetBeans Matisse?</title>
		<p>Mostly maintainability. For smaller examples it's probably not much of a difference 
		(since so much of the code is generated for you by Matisse), but once you get into larger, more 
		complex forms it becomes harder to maintain them in a GUI builder, especially if you have to move 
		the layout around a lot.  In JavaBuilders, it's just a matter of changing a few lines of text 
		in a YAML file.</p>
		<p>Also, e can add "custom" properties to existing objects, so we can enhance APIs or make them 
		easier, e.g.:
		<codeblock>
JFrame(size=800x400)
		</codeblock>		
		The Swing JFrame class does not have a property called "size". But JavaBuilders can support 
		virtual properties which trigger some Java code that will magically call the proper 
		equivalent methods, in order to achieve the same functionality in much less code.</p>
		<p>Last, but not least, JavaBuilders provide support for functionality not provided by
		GUI builders, such as integrated input validators or executing cancellable long running methods 
		on a background thread.</p> 
	</section>
	</body>
</topic>