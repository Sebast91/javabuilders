<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081226132820" xml:lang="en-CA">
	<title>Input validation</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
		<section>
			<p>
				Similar to data binding, input validation is configured via a
				separate root level node called
				<apiname>validate</apiname>:
				<codeblock>
JFrame(name=frame,title=Binding Frame,size=packed):
    content:
        - JLabel(name=fnLbl, text="First name:")
        - JTextField(name=fName)
        - JLabel(name=lnLbl, text="Last name:")
        - JTextField(name=lName)
        - JButton(name=ok, text=OK, onAction=($validate,save,cancel))
        - JButton(name=cancel, text=Cancel, onAction=cancel)
        - MigLayout: |
           []      [grow,200px]
           >fnLbl  fName
           >lnLbl  lName         
           >ok+*=1,cancel=1      [grow,bottom]
bind:
    - firstName: fName.text
    - lastName: lName.text
validate:
    - fName.text: {label: First Name, mandatory: true, minLength : 5}  			
			</codeblock>
			</p>
		</section>
		<section>
			<title>Invoking input validation</title>
			<p>
				If you want to do in from the YAML file, just put
				<apiname>$validate</apiname>
				as the method name in any event handler, e.g.
				<codeblock>
JButton(name=saveBtn,text=Save,onAction=($validate,save,close))
			</codeblock>
				If you want to do it from the Java then you just need to call the
				<apiname>validate()</apiname>
				method on the
				<apiname>BuildResult</apiname>
				object that was returned:
				<codeblock>
private BuildResult result = SwingJavaBuilder.build(this);

//validate user input
private boolean validate() {
    return result.validate();
}
			</codeblock>
			</p>
		</section>
		<section>
			<title>Field label for error messages</title>
			<p>
				The "label" property is used to define the name of the field that
				will be using in any error messages. It is localizable, so you can
				sent it a resource key instead, e.g.:
				<codeblock>
validate:
    - fName.text: {label: label.firstName, mandatory: true, minLength : 5}  			
			</codeblock>
			</p>
		</section>
		<section>
			<title>Validator routines</title>
			<p>The following validator routines are currently available</p>
			<simpletable>
				<sthead>
					<stentry>Validation type</stentry>
					<stentry>Example</stentry>
					<stentry>Comment</stentry>
				</sthead>
				<strow>
					<stentry>mandatory</stentry>
					<stentry>mandatory: true</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>minLength</stentry>
					<stentry>minLength : 5</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>maxLength</stentry>
					<stentry>maxLength : 5</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>regex</stentry>
					<stentry>regex: "[a-zA-Z0-9]+"</stentry>
					<stentry>Uses default validation message</stentry>
				</strow>
				<strow>
					<stentry></stentry>
					<stentry>regex: "[a-zA-Z0-9]+", regexMessage: "''{0}'' must be a number or letter"</stentry>
					<stentry>Uses custom error messagee</stentry>
				</strow>
				<strow>
					<stentry>minValue</stentry>
					<stentry>minValue: 5</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>maxValue</stentry>
					<stentry>maxValue: 50</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>dateFormat</stentry>
					<stentry>dateFormat: yyyy/mm/dd</stentry>
					<stentry></stentry>
				</strow>
				<strow>
					<stentry>emailAddress</stentry>
					<stentry>emailAddress: true</stentry>
					<stentry></stentry>
				</strow>
			</simpletable>
		</section>
		<section>
			<title>Full example</title>
			<p>
			<codeblock>
validate:
    - mandatory.text: {label: Mandatory Field, mandatory: true}
    - date.text: {label: Date Field, dateFormat: "yyyy/mm/dd"}
    - email.text: {label: E-Mail, email: true}
    - minmax.text: {label: Min/Max Length, minLength: 5, maxLength: 10}
    - regex.text: {label: Regex, regex: "[a-zA-Z0-9]+"}
    - regex2.text: {label: Regex, regex: "[a-zA-Z0-9]+", regexMessage: "''{0}'' must be a number or letter"}
    - long.text: {label: Min/Max Long, minValue: 5, maxValue: 50, mandatory: true}			
			</codeblock>
			</p>
		</section>
		<section>
			<title>Adding custom validators</title>
			<p>The default validator routines not powerful enough for you? You can easily add custom validation logic to be executed together with the built-in routines via Java-side code: 
			<codeblock>
result.getValidators().add(new ICustomValidator() {

    public void validate(Object value, ValidationMessageList list) {
        if (!isValid) {
                list.add(new ValidationMessage("Input is not valid 'cause I say so"));
        }
    }
});			
			</codeblock>
			</p>
		</section>
		
	</body>
</topic>