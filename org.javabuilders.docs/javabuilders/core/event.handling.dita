<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081226114356" xml:lang="en-CA">
	<title>Hooking up event listeners to Java methods</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
		<section>
			<title>Overview</title>
			<p>
				The standard approach is to provide a standard "onEvent" property
				(e.g. "onAction", "onClicked", "onDoubleClicked") and then pass it a
				single method name or a collection of method names.
				<codeblock spectitle="Single method">
JButton(text=OK, onAction=save)		
		</codeblock>
				<codeblock spectitle="Multiple methods to be executed in sequence">
JButton(text=OK, onAction=[validateInput,save,close])
		</codeblock>
				If any of the methods return a boolean
				<b>false</b>
				, then the other methods get aborted and will not be called. Simple
				convention over configuration approach
			</p>
		</section>
		<section>
			<title>Mapping to methods on the Java side</title>
			<p>
				When you specify a method name (e.g. "save") in the YAML file, it
				will attempt to execute the corresponding method in the Java class.
				Different signatures of the method are supported, in order of
				preference:
				<codeblock
					spectitle="method(calling object type or its superclass, event specific class)">
private void save(JButton button, ActionEvent event) {}		
		</codeblock>
				<codeblock
					spectitle="method(event specific class)">
private void save(ActionEvent event) {}
		</codeblock>
		<codeblock spectitle="method(calling object type or its superclass)">
private void save(JButton button) {}		
		</codeblock>
<codeblock spectitle="method()">
private void save() {}		
		</codeblock>		
Enter whichever one you want and JavaBuilders will find it and execute it. 
If it finds multiple ones, it will execute the first one it finds based on the preference above.
If none are found, a BuildException will  be thrown <b>right away during build time</b>. So, you do
not have to actually test your event listener logic by manually clicking on the button or menu item,
the validation occurs right away as part of the build process. This simplifies unit testing and limits
the risk of lost type safety.
			</p>
		</section>
	</body>
</topic>