<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081230092519" xml:lang="en-CA">
	<title>Internationalization</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
		<section>
			<p>Internationalizaton support in any Builder is
				provided at two levels: global and class-level. If any resource
				bundle is present (either at the global or class level), the
				internationalization support will automatically get activated.</p>
		</section>
		<section>
			<title>Global Resource Bundles</title>
			<p>
				In your main() just add the list of global application resource
				bundles to the configuration of your builder, e.g.:
				<codeblock>
SwingJavaBuilder.getConfig().addResourceBundle("Resources");			
			</codeblock>
				or:
				<codeblock>
ResourceBundle myResourceBundle = ....
SwingJavaBuilder.getConfig().addResourceBundle(myResourceBundle);			
			</codeblock>
			</p>
		</section>
		<section>
			<title>Class-level Resource Bundles</title>
			<p>
				If you need to have additional class-level resource bundles, just
				pass them in during the buld request:
				<codeblock>
private ResourceBundle bundle = ResourceBundle.getBundle("MyClassBundle");
private BuildResult result = SwingJavaBuilder.build(this, bundle);			
			</codeblock>
				The builder will look at the class-level bundles first for a key and
				if not found, will search through the global ones.
			</p>
		</section>
		<section>
			<title>Usage</title>
			<p>Once you register a resource bundle, you can pass a resource name directly to any of the properties that have been flagged as localizable, e.g.
			<codeblock spectitle="YAML">
JButton(name=okButton, text=button.ok)			
			</codeblock>
			<codeblock spectitle="Properties file">
button.ok=OK			
			</codeblock>
			</p>
		</section>
	</body>
</topic>