<?xml version="1.0" encoding="utf-8"?><?workdir /media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/temp/core?>
<?path2project ../?>
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="id20081230120511" xml:lang="en-CA" ditaarch:DITAArchVersion="1.1" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                          (topic ut-d) (topic indexing-d)" class="- topic/topic " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="topic:1">
	<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:1">Extending the JavaBuilders engine</title>
	<prolog class="- topic/prolog " xtrc="prolog:1" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita">
		<author class="- topic/author " xtrc="author:1" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.ditamap">Jacek Furmankiewicz</author><author class="- topic/author " xtrc="author:1" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita">Jacek Furmankiewicz</author>
	</prolog>
	<body class="- topic/body " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="body:1">
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="section:1">
			<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:2">Overview</title>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:1">The core JavaBuilders engine is domain-agnostic, i.e. there is no logic in it
			specific to any particular toolkit such as Swing or SWT. Each of domain-specific
			builders (such as the Swing JavaBuilder or the SWT JavaBuilder) are just thin proxies
			for the common <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:1">Builder</codeph> APIs which pass along a pre-configured instance of a 
			<codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:2">BuilderConfig</codeph> object, which contains all the component types
			and custom handlers for each UI toolkit.</p>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:2">This builder configuration object is usually exposed via the static <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:3">getConfig()</codeph>
			method on the builder, e.g. <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:4">SwingJavaBuilder.getConfig()</codeph>.</p>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:3">By manipulating its properties you can change the default configuration, register
			new object types, customized handlers for particular controls or particular properties
			of a control.</p>
		</section>
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="section:2">
			<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:3">Registering new component types</title>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:4">All you need to do is call the <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:5">BuilderConfig.addType(Class clazz)</codeph>
			method, presumably from your application's <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeph:6">main()</codeph>:
			<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeblock:1">
SwingJavaBuilder.getConfig().addType(MyCustomComponent.class);
			</codeblock>			
			and then you can start referring to it directly in the YAML file:
			<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeblock:2">
MyCustomClass(property1=value1,property2=value2, etc...)			
			</codeblock>
			You can also add it with a specific alias to avoid name collision (by default it takes the simple class name): 
			<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeblock:3">
SwingJavaBuilder.getConfig().addType("CustomClassAlias",MyCustomClass.class);
			</codeblock>
			<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="codeblock:4">
CustomClassAlias(property1=value1,property2=value2, etc...)			
			</codeblock>
			</p>
		</section>
		
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="section:3">
		  <title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:4">Customizing object creation : ITypeHandler</title>
		  <p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:5">If you need to write your own custom creation code for a class instance (e.g. for a control that has
		  a constructor that expects parameters during initialization), you need to implement an instance of
		  <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:1">ITypeHandler</apiname>, usually by extending <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:2">AbstractTypeHandler</apiname>. 
		  It needs to be then registered for the class-specific <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:3">TypeDefinition</apiname> object within
		  the <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:4">BuilderConfig</apiname> instance.
		  </p>
		</section>
		
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="section:4">
		  <title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:5">Customizing initialization logic: ITypeHandlerAfterCreationProcessor</title>
		  <p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:6">
		  If your object does not need special constructor logic, but just some post-creation initialization, then
		  you need to implement the simple <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:5">IAfterCreationProcessor</apiname> interface and register it 
		  with your type's <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:6">TypeDefinition</apiname>. It's logic will be executed after the object is created,
		  but before any children get processed.
		  </p>
		</section>
		
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="section:5">
		  <title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="title:6">Customizing post-processing of children nodes; ITypeHandlerFinishProcessor</title>
		  <p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="p:7">If you need to inject some logic after a parent's child nodes have been all processed, you need to
		  implement the <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:7">ITypeHandlerFinishProcessor</apiname> interface and add it to the appropriate
		  <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/extending.dita" xtrc="apiname:8">TypeDefinition</apiname> object.</p>
		</section>
		
		
	</body>
</topic>