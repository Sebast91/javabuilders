<?xml version="1.0" encoding="utf-8"?><?workdir /media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/temp/core?>
<?path2project ../?>
<topic xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/" id="id20081218142211" xml:lang="en-CA" ditaarch:DITAArchVersion="1.1" domains="(topic ui-d) (topic hi-d) (topic pr-d) (topic sw-d)                          (topic ut-d) (topic indexing-d)" class="- topic/topic " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="topic:1">
	<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="title:1">Overview</title>
	<prolog class="- topic/prolog "><author class="- topic/author " xtrc="author:1" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap">Jacek Furmankiewicz</author></prolog><body class="- topic/body " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="body:1">
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="section:1">
			<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="title:2">What is JavaBuilders all about?</title>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="p:1">
				In short any object that is built using a JavaBuilder consists of
				two files:
				<ul class="- topic/ul " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="ul:1">
					<li class="- topic/li " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="li:1">
						a
						<apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="apiname:1">YAML</apiname>
						text file that provides a declarative definition of the subject,
						most commonly the user interface. This would include items such as
						the controls that get instantiated, their properties, which
						methods should be called from event listeners, layout definition,
						data binding definition, predefined validations on controls or
						their properties.
					</li>
					<li class="- topic/li " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="li:2">
						a
						<apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="apiname:2">Java</apiname>
						class with all the actual code that represents the object being
						built. So for example, in
						<apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="apiname:3">Swing JavaBuilder</apiname>
						the Java class may be a
						<apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="apiname:4">JFrame</apiname>
						with all the relevant methods (e.g.
						<codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeph:1">save(), close(), validateInput()</codeph>
						, as well as public properties that refer to the data being
						entered/maintained in the window).
					</li>
				</ul>
			</p>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="p:2">
				Using a convention over configuration approach inspired by the
				Apache Wicket web framework, both files reside in the same package
				and with the same name, but just with a different file extension,
				e.g.:
				<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeblock:1">
MainApplicationFrame.java
MainApplicationFrame.yaml
			</codeblock>
			     If you are using an inner class, e.g.
			 <codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeblock:2">
public class CommonPanels
{
  public static class SomePanel
  {
    SwingBuilder.build(this);
  }
}
			 </codeblock>
then you can define a YAML file using the <codeph class="+ topic/ph pr-d/codeph " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeph:2">"DeclaringClass.InnerClass.yaml"</codeph> format, e.g.
<codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeblock:3">
CommonPanels.SomePanel.yaml
</codeblock> 
                in order to build an instance of the inner class.			   
			</p>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="p:3">
			Alternatively, you may even specify a build file explicitly by using the class-level <apiname class="+ topic/keyword pr-d/apiname " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="apiname:5">@BuildFile</apiname>
			annotation, which accepts a local or absolute file path within the classpath:
			<codeblock spectitle="Local package file path" xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeblock:4">
@BuildFile("Common.yaml")
public class LocalBuildFilePanel extends JPanel
			</codeblock>
			or:
			<codeblock spectitle="Absolute file path" xml:space="preserve" class="+ topic/pre pr-d/codeblock " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="codeblock:5">
@BuildFile("/org/javabuilders/test/resources/Common.yaml")
public class GlobalBuildFilePanel extends JPanel 
			</codeblock>
			</p>
		</section>
		<section class="- topic/section " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="section:2">
			<title class="- topic/title " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="title:3">Why would I use this instead of regular coding by hand?
			</title>
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="p:4">Because you will have to write a lot less code to the same
				thing if you use a JavaBuilder. This is what it's all about.</p>
		</section>
		<note class="- topic/note " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="note:1">
			<p class="- topic/p " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.dita" xtrc="p:5">The YAML file contains only a declaration of the interface,
				which methods (on the Java side) should be fired when the user
				pressed a button, data binding instructions, data validation
				definitions, etc. It has zero code (of any type, Java, Javascript,
				etc.) embedded in it. The idea is that 100% of actual code you write is in the Java file and nowhere else.</p>
		</note>
	</body>
<related-links class="- topic/related-links "><linkpool class="- topic/linkpool " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" xtrc="topicref:1" mapkeyref="swing.javabuilder"><linkpool class="- topic/linkpool " xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" xtrc="topicref:1"><link class="- topic/link " mapclass="- map/topicref " rev="1.0.DEV" type="" xtrc="topicref:2" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" href="../core/yaml.xml" role="child"/><link class="- topic/link " mapclass="- map/topicref " rev="1.0.DEV" type="" xtrc="topicref:3" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" href="../core/yaml.compact.xml" role="child"/><link class="- topic/link " mapclass="- map/topicref " rev="1.0.DEV" type="" xtrc="topicref:4" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" href="../core/dev.tools.xml" role="child"/><link class="- topic/link " mapclass="- map/topicref " rev="1.0.DEV" type="" xtrc="topicref:5" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" href="../core/benefits.xml" role="child"/><link class="- topic/link " mapclass="- map/topicref " rev="1.0.DEV" type="" xtrc="topicref:6" xtrf="/media/My Passport/Jacek/Dev/javabuilders/org.javabuilders.docs/javabuilders/core/overview.ditamap" href="../core/drawbacks.xml" role="child"/></linkpool></linkpool></related-links>
</topic>