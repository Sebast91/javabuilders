<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="id20081231083953" xml:lang="en-CA">
	<title>Actions and menus</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
		<section>
			<p>Creating actions and menus for any application is one of
				the most cumbersome and time consuming tasks in Swing development.
				Fortunately enough, the Swing JavaBuilder delivers a whole slew of
				productivity enhancements in this area that makes creating menus a
				breeze.</p>
		</section>
		<section>
			<title>Text, accelerators and mnemonics</title>
			<p>
				Whether you are dealing with an
				<codeph>Action</codeph>
				or a
				<codeph>JMenuItem</codeph>
				, you can handle defining all these 3 properties in one simple text
				value, where the mnemonic is indicated via a
				<codeph>"&amp;"</codeph>
			prefix and the accelerator is typed in manually after a <codeph>"\t"</codeph> tab
			indicator (similar to the way it is done in SWT), e.g.
			<codeblock>
JMenuItem(text="&amp;Save\tCtrl+S")			
			</codeblock>
			The sample above sets the text to "Save", the mnemonic on the "S" character and the 
			accelerator to "Ctrl+S".
			</p>
			<p>Valid accelerators are:
			<ol>
				<li>Ctrl</li>
				<li>Alt</li>
				<li>Shift</li>
				<li>Meta</li>
			</ol>
			followed by the appropriate character. They can be mixed together, e.g. "Ctrl+Alt+N".
			Due to the embedded "\t", such menu definitions have to be escaped into quoted text, as per the example above. 
			</p>
		</section>
		<section>
			<title>Actions</title>
			<p>The regular Swing Action API has been modified separately to separate the 
			concept of "name" vs "text" (which are the same in the Action API, but we treat 
			them separately so that the text can be easily internationalized, without affecting the name).
			It provides <apiname>name, text, toolTipText, icon</apiname> properties and the name
			of the Java method to be invoked is defined in the <apiname>onAction</apiname> handler.
			<codeblock spectitle="YAML">
Action(name=newAction, text=menu.file.new, icon=images/document-new.png, onAction=onFileNew)			
			</codeblock>
			<codeblock spectitle="Java">
 private void onFileNew() {
         System.out.print("onFileNew was invoked!");
 }			
			</codeblock>
			</p>
			<p>
			Any descendant of <apiname>AbstractButton</apiname> (such as <apiname>JMenuItem</apiname>
			or <apiname>JButton</apiname> can then refer to it in its <apiname>action</apiname> property, e.g.:
			<codeblock>
JFrame(title=frame.title, state=max, defaultCloseOperation=exitOnClose):
    - Action(name=newAction, text=menu.file.new, toolTipText=menu.file.new.tooltip, icon=images/document-new.png, onAction=onFileNew)
    - Action(name=openAction, text=menu.file.open, toolTipText=menu.file.open.tooltip, icon=images/document-open.png, onAction=onFileOpen)
    - Action(name=saveAction, text=menu.file.save, toolTipText=menu.file.save.tooltip, icon=images/document-save.png, onAction=onSave)
    - Action(name=exitAction, text=menu.file.exit, icon=images/process-stop.png, onAction=($confirm,exit))
    - Action(name=option1Action, text=menu.option1, onAction=option1)
    - Action(name=helpAboutAction,text=menu.help.about,onAction=onHelpAbout)
    - JMenuBar:
        - JMenu(name=fileMenu,text=menu.file):
            - JMenuItem(action=newAction)
            - JMenuItem(action=openAction)            
            - JSeparator()
            - JMenuItem(action=saveAction)
            - JSeparator()
            - JMenuItem(action=exitAction)
        - JMenu(name=optionsMenu, text=menu.options):
            - JRadioButtonMenuItem(name=radio1Menu, action=option1Action)
            - JRadioButtonMenuItem(name=radio2Menu, text=menu.option2)
            - JRadioButtonMenuItem(name=radio3Menu, text=menu.option3)
            - ButtonGroup: [radio1Menu, radio2Menu, radio3Menu]
            - JSeparator()
            - JCheckBoxMenuItem(text=menu.option1, onAction=option1)
            - JCheckBoxMenuItem(text=menu.option2)
            - JCheckBoxMenuItem(text=menu.option3)
        - JMenu(name=helpMenu,text=menu.help):
            - JMenuItem(action=helpAboutAction)			
			</codeblock>			 
			</p>
		</section>
		<section>
			<title>JMenuBar and JMenuItem</title>
			<p>If you do not wish to use Actions, you can create menus by directly specifying the relevant
			properties on JMenuBar and JMenuItem instances:
<codeblock>
JFrame(title=frame.title, iconImage=images/system-lock-screen.png):
    - JMenuBar:
        - JMenu(name=fileMenu,text=menu.file):
            - JMenuItem(name=newMenu, text=menu.file.new, onAction=onFileNew)
            - JMenuItem(name=openMenu, text=menu.file.open, onAction=onFileOpen)            
            - JSeparator()
            - JMenuItem(name=exitMenu, text=menu.file.exit, onAction=exit)
        - JMenu(name=optionsMenu, text=menu.options):
            - JRadioButtonMenuItem(name=radio1Menu, text=menu.option1, onAction=option1)
            - JRadioButtonMenuItem(name=radio2Menu, text=menu.option2)
            - JRadioButtonMenuItem(name=radio3Menu, text=menu.option3)
            - ButtonGroup: [radio1Menu, radio2Menu, radio3Menu]
            - JSeparator()
            - JCheckBoxMenuItem(text=menu.option1, onAction=option1)
            - JCheckBoxMenuItem(text=menu.option2)
            - JCheckBoxMenuItem(text=menu.option3)
        - JMenu(name=helpMenu,text=menu.help):
            - JMenuItem(name=helpAboutMenu,text=menu.help.about,onAction=onHelpAbout)
</codeblock>			
However, we recommend you always use Actions instead.
			</p>
		</section>
		<section>
			<title>JPopupMenu</title>
			<p>
				Popup menus can easily be added to any Swing component by simply specifying the 
				<apiname>"popupMenu"</apiname> property to point to an existing 
				<apiname>JPopupMenu</apiname> instance by name. The Swing JavaBuilder takes care 
				of all the mouse event wiring to popup the menu upon right-click.
				<codeblock spectitle="With actions">
- Action(name=copyAction, text=menu.edit.copy, onAction=copy)
- Action(name=pasteAction, text=menu.edit.paste, onAction=paste)
- JPopupMenu(name=popup):
    - JMenuItem(action=copyAction)
    - JMenuItem(action=pasteAction)
- JTabbedPane(name=tabs, onChange=onTabChanged):
     - JPanel(name=frameYamlSource, tabTitle=tab.frameYamlSource):
         - JScrollPane(name=scroll1): 
               JTextArea(name=frameSourceArea, popupMenu=popup)				
				</codeblock>
				<codeblock spectitle="Without actions">
- JPopupMenu(name=popup):
    - JMenuItem(name=popupCopy, text=Copy, onAction=copy)
    - JMenuItem(name=popupPaste, text=Paste, onAction=paste)
- JTabbedPane(name=tabs, onChange=onTabChanged):
     - JPanel(name=frameYamlSource, tabTitle=tab.frameYamlSource):
         - JScrollPane(name=scroll1): 
               JTextArea(name=frameSourceArea, popupMenu=popup)
				</codeblock> 			
			</p>
		</section>
	</body>
</topic>