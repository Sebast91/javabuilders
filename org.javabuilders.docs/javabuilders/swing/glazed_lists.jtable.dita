<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="o8qdqx3m4lw3" xml:lang="en-CA">
	<title>JTable</title>
	<prolog>
		<author>Jacek Furmankiewicz</author>
	</prolog>
	<body>
	   <section>
	       <title>EventTableModel</title>
	       <p>
	       The <apiname>JTable</apiname>-specific model in GlazedLists is called <apiname>EventTableModel</apiname>.
	       You will need to define a GlazedLists <apiname>EventList</apiname> in your Java code to hold the master
	       list of objects and point the <apiname>EventTableModel.source</apiname> property in the YAML file to it.
	       <codeblock spectitle="Java">
public class Person {

    private String firstName;
    private String lastName;
    private Date birthDate;
    
    //getters and setters for all properties...
}

public class GlazedListJListPanel extends JPanel {

    private EventList&lt;Person&gt; values = new BasicEventList&lt;Person&gt;();
    private BuildResult result;
    
    public GlazedListJListPanel() {
        result = SwingJavaBuilder.build(this);
    }
}
	       </codeblock>
	       <codeblock spectitle="YAML">
JPanel:
    - JTable(name=list): 
         - EventTableModel(name=model,source=values)	       
	       </codeblock>
	       When you add/remove items in your <apiname>EventList</apiname>, they will automatically be propagated to the
	       <apiname>JTable</apiname> <apiname>EventTableModel</apiname>.
	       </p>
	   </section>
	   <section>
	       <title>Controlling table columns</title>
	       <p>
	       The sample code shown above displays by default all properties that can be found in the <codeph>Person</codeph> POJO
	       as table columns. Usually though you would want to maintain some control over that, as well as customize
	       certain parameters of the column (e.g. the header string). The simplest way to accomplish this is to define a
	       <apiname>columns=[]</apiname> element: 
<codeblock>
JPanel:
    - JTable(name=list): 
        - EventTableModel(name=model,source=values,columns=[firstName,lastName])
</codeblock>	       
	       The example above will display only the "firstName" and "lastName" properties as columns.
	       Alternatively, you can to explicitly define
	       the <apiname>TableColumn</apiname> instances:
           <codeblock spectitle="YAML">
JPanel:
    - JTable(name=list): 
        - EventTableModel(name=model,source=values)
        - TableColumn(name=firstName,headerValue=column.firstName)
        - TableColumn(name=lastName,headerValue=column.lastName)           
           </codeblock>
           Since the <codeph>"headerValue"</codeph> column is localizable, it will automatically fetch the corresponding
           string key from the configured resource bundles.
	       </p>
	       <p>Yet another option is to define all the columns you need via <apiname>columns=[]</apiname> and then just
	       define the <apiname>TableColumn</apiname>instance if you need to customize it further (e.g. add a cell renderer or editor).</p>
	   </section>
	   <section>
	       <title>Localizing column headers</title>
	       <p>
	       When you define a list of columns in the <apiname>columns=[]</apiname> parameter, the builder will attempt to automatically
	       look up the header name for it using the following strategy:
	       <ol>
	           <li>look for a resource key euqal to "SimpleClassName.PropertyName", e.g. "Person.firstName"</li>
	           <li>look for a resource key equal to "PropertyName", e.g. "firstName"</li>
	           <li>if no resource keys are found, attempt to build a header directly from the property name, 
	           e.g. "firstName" becomes "First Name"</li>
	       </ol>
	       </p>
	   </section>
       <section>
           <title>Handling duplicate column names</title>
           <p>
           Within a single YAML file, all object names must be unique. So what happens if we have let's say two tables that
           display data from different POJOs (or maybe different views of the same POJO) that happen to have the same names?
           In this particular case, you can use the <codeph>"source"</codeph> property of the <apiname>TableColumn</apiname> level.
           If this property is defined, the builder will use that instead of <codeph>"name"</codeph> to map a <codeph>TableColumn</codeph>
           to a POJO's property.
           <codeblock spectitle="YAML">
JPanel:
    - JTable(name=list1): 
        - EventTableModel(name=model,source=values)
        - TableColumn(name=column1,source=firstName,headerValue=column.firstName)
        - TableColumn(name=column2,source=lastName,headerValue=column.lastName)           
    - JTable(name=list2): 
        - EventTableModel(name=model,source=values)
        - TableColumn(name=column3,source=firstName,headerValue=column.firstName)
        - TableColumn(name=column4,source=lastName,headerValue=column.lastName)           
           </codeblock>
           In the sample above, two different tables display the same POJO data by using the optional <codeph>"source"</codeph> to 
           avoid name clashes on <apiname>TableColumn.name</apiname>.
           </p>
       </section>
       <section>
            <title>Sorting</title>
            <p>
            In order to enable sorting, you have to add the <apiname>sort</apiname> property, which has two allowed values:
            <ul>
                <li><apiname>single</apiname> - sorts by single column only</li>
                <li><apiname>multi</apiname> - allows sorting by multiple columns</li>
            </ul>
            Sorting is activated by the user clicking with the mouse on the column headers.
            <codeblock>
JPanel:
    - JTable(name=list): 
        - EventTableModel(name=model,source=values,columns=[firstName,lastName],sort=multi)
            </codeblock>
            </p>
       </section>
	</body>
</topic>