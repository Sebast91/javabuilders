<?xml version="1.0" encoding="UTF-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:fox="http://xml.apache.org/fop/extensions">Swing JavaBuilderAchieving maximum productivity with minimum code via declarative UIs<fox:outline internal-destination="N20006">
<fox:label>Abstract</fox:label>
</fox:outline>
<fox:outline internal-destination="N30006">
<fox:label>License</fox:label>
</fox:outline>
<fox:outline internal-destination="N40006">
<fox:label>Preface</fox:label>
</fox:outline>
<fox:outline internal-destination="N50006">
<fox:label>Installation</fox:label>
</fox:outline>
<fox:outline internal-destination="N60006">
<fox:label>Overview</fox:label>
<fox:outline internal-destination="NB0006">
<fox:label>YAML</fox:label>
</fox:outline>
<fox:outline internal-destination="NC0006">
<fox:label>Compact YAML syntax</fox:label>
</fox:outline>
<fox:outline internal-destination="ND0006">
<fox:label>Development tools</fox:label>
</fox:outline>
<fox:outline internal-destination="NE0006">
<fox:label>Benefits</fox:label>
</fox:outline>
<fox:outline internal-destination="NF0006">
<fox:label>Drawbacks</fox:label>
</fox:outline>
</fox:outline>
<fox:outline internal-destination="N100006">
<fox:label>Swing JavaBuilder in 60 seconds or less</fox:label>
</fox:outline>
<fox:outline internal-destination="N110006">
<fox:label>Core Features</fox:label>
<fox:outline internal-destination="N120006">
<fox:label>Obtaining references to created components</fox:label>
</fox:outline>
<fox:outline internal-destination="N130006">
<fox:label>Hooking up event listeners to Java methods</fox:label>
</fox:outline>
<fox:outline internal-destination="N140006">
<fox:label>Databinding</fox:label>
</fox:outline>
<fox:outline internal-destination="N150006">
<fox:label>Input validation</fox:label>
</fox:outline>
<fox:outline internal-destination="N160006">
<fox:label>Executing long running methods on a background thread</fox:label>
</fox:outline>
<fox:outline internal-destination="N170006">
<fox:label>Internationalization</fox:label>
</fox:outline>
<fox:outline internal-destination="N180006">
<fox:label>Enum property values</fox:label>
</fox:outline>
<fox:outline internal-destination="N190006">
<fox:label>Static int constant property values</fox:label>
</fox:outline>
<fox:outline internal-destination="N1A0006">
<fox:label>Using custom components</fox:label>
</fox:outline>
<fox:outline internal-destination="N1B0006">
<fox:label>Custom global commands</fox:label>
</fox:outline>
<fox:outline internal-destination="N1C0006">
<fox:label>Build events</fox:label>
</fox:outline>
<fox:outline internal-destination="N1D0006">
<fox:label>Hot deployment of UI components</fox:label>
</fox:outline>
</fox:outline>
<fox:outline internal-destination="N1E0006">
<fox:label>Swing Features</fox:label>
<fox:outline internal-destination="N1F0006">
<fox:label>Overview</fox:label>
</fox:outline>
<fox:outline internal-destination="N200006">
<fox:label>Actions and menus</fox:label>
</fox:outline>
<fox:outline internal-destination="N210006">
<fox:label>Borders</fox:label>
</fox:outline>
<fox:outline internal-destination="N220006">
<fox:label>Button Group</fox:label>
</fox:outline>
<fox:outline internal-destination="N230006">
<fox:label>Colors</fox:label>
</fox:outline>
<fox:outline internal-destination="N240006">
<fox:label>Fonts</fox:label>
</fox:outline>
<fox:outline internal-destination="N250006">
<fox:label>Icons and images</fox:label>
</fox:outline>
<fox:outline internal-destination="N260006">
<fox:label>JComboBox</fox:label>
</fox:outline>
<fox:outline internal-destination="N270006">
<fox:label>JFrame</fox:label>
</fox:outline>
<fox:outline internal-destination="N280006">
<fox:label>JList</fox:label>
</fox:outline>
<fox:outline internal-destination="N290006">
<fox:label>JScrollPane</fox:label>
</fox:outline>
<fox:outline internal-destination="N2A0006">
<fox:label>JSplitPane</fox:label>
</fox:outline>
<fox:outline internal-destination="N2B0006">
<fox:label>JTabbedPane</fox:label>
</fox:outline>
<fox:outline internal-destination="N2C0006">
<fox:label>JTable</fox:label>
</fox:outline>
<fox:outline internal-destination="N2D0006">
<fox:label>Event handlers</fox:label>
</fox:outline>
</fox:outline>
<fox:outline internal-destination="N2E0006">
<fox:label>Swing Layout Management</fox:label>
<fox:outline internal-destination="N2F0006">
<fox:label>MigLayout DSL</fox:label>
</fox:outline>
<fox:outline internal-destination="N300006">
<fox:label>MigLayout</fox:label>
</fox:outline>
<fox:outline internal-destination="N310006">
<fox:label>CardLayout</fox:label>
</fox:outline>
<fox:outline internal-destination="N320006">
<fox:label>FlowLayout</fox:label>
</fox:outline>
</fox:outline>
<fox:outline internal-destination="N330006">
<fox:label>GlazedLists databinding for list controls</fox:label>
<fox:outline internal-destination="N340006">
<fox:label>JComboBox</fox:label>
</fox:outline>
<fox:outline internal-destination="N350006">
<fox:label>JList</fox:label>
</fox:outline>
</fox:outline>
<fox:outline internal-destination="N360006">
<fox:label>Extending the JavaBuilders engine</fox:label>
</fox:outline>
<fox:outline internal-destination="N370006">
<fox:label>Appendix</fox:label>
<fox:outline internal-destination="N390006">
<fox:label>Layout Samples</fox:label>
</fox:outline>
</fox:outline>
<fo:layout-master-set>
<fo:page-sequence-master master-name="chapter-master">
<fo:repeatable-page-master-alternatives>
<fo:conditional-page-master-reference master-reference="common-page" odd-or-even="odd" page-position="first"/>
<fo:conditional-page-master-reference master-reference="common-page" odd-or-even="even" page-position="first"/>
<fo:conditional-page-master-reference master-reference="common-page" odd-or-even="odd" page-position="rest"/>
<fo:conditional-page-master-reference master-reference="common-page" odd-or-even="even" page-position="rest"/>
</fo:repeatable-page-master-alternatives>
</fo:page-sequence-master>
<fo:simple-page-master page-width="51pc" page-height="66pc" margin-top="3pc" margin-bottom="3pc" margin-left="6pc" margin-right="6pc" master-name="cover">
<fo:region-body margin-top="72pt"/>
</fo:simple-page-master>
<fo:simple-page-master page-width="51pc" page-height="66pc" margin-top="3pc" margin-bottom="3pc" margin-left="6pc" margin-right="6pc" master-name="common-page">
<fo:region-body margin-top="12pt" margin-bottom="36pt"/>
<fo:region-before extent="12pt"/>
<fo:region-after extent="24pt"/>
</fo:simple-page-master>
</fo:layout-master-set>
<fo:page-sequence master-reference="cover">
<fo:flow flow-name="xsl-region-body">
<fo:block font-family="Helvetica" text-align="right">
<fo:block line-height="140%" font-weight="bold" font-size="30pt">Swing JavaBuilder</fo:block>
<fo:block margin-bottom="1in" line-height="140%" font-weight="bold" font-size="24pt">Achieving maximum productivity with minimum code via declarative UIs</fo:block>
<fo:block line-height="1.5" font-weight="bold" font-size="11pt">Jacek Furmankiewicz</fo:block>
<fo:block line-height="1.5" font-weight="bold" font-size="11pt">Jacek Furmankiewcz</fo:block>
<fo:block margin-bottom="1in" line-height="140%" font-weight="bold" font-size="8pt">
            Version
1.0.DEV</fo:block>
<fo:block line-height="normal" font-size="8pt" text-align="right" margin-top="3pc">
			© Copyright  2008-2009 Jacek Furmankiewicz
			</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence initial-page-number="1" format="i" master-reference="common-page">
<fo:static-content flow-name="xsl-region-before">
<fo:block line-height="8pt" font-size="8pt">Swing JavaBuilder - Achieving maximum productivity with minimum code via declarative UIs</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-family="Helvetica" font-weight="bold" font-size="10pt" text-align="center">
<fo:page-number/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block id="page1-1" font-family="Helvetica" font-size="10pt" line-height="12pt">
<fo:block font-family="Helvetica" text-align="left">
<fo:block>
<fo:leader leader-length="2in" rule-thickness="3pt" leader-pattern="rule" color="black"/>
</fo:block>
<fo:block line-height="140%" font-weight="bold" font-size="20pt">
              Contents </fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Installation</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N50006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Overview</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N60006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">YAML</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="NB0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Compact YAML syntax</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="NC0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Development tools</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="ND0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Benefits</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="NE0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Drawbacks</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="NF0006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Swing JavaBuilder in 60 seconds or less</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N100006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Core Features</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N110006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Obtaining references to created components</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N120006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Hooking up event listeners to Java methods</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N130006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Databinding</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N140006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Input validation</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N150006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Executing long running methods on a background thread</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N160006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Internationalization</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N170006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Enum property values</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N180006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Static int constant property values</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N190006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Using custom components</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1A0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Custom global commands</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1B0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Build events</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1C0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Hot deployment of UI components</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1D0006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Swing Features</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1E0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Overview</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N1F0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Actions and menus</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N200006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Borders</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N210006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Button Group</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N220006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Colors</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N230006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Fonts</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N240006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Icons and images</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N250006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JComboBox</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N260006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JFrame</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N270006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JList</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N280006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JScrollPane</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N290006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JSplitPane</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2A0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JTabbedPane</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2B0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JTable</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2C0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Event handlers</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2D0006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Swing Layout Management</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2E0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">MigLayout DSL</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N2F0006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">MigLayout</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N300006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">CardLayout</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N310006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">FlowLayout</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N320006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">GlazedLists databinding for list controls</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N330006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JComboBox</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N340006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">JList</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N350006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Extending the JavaBuilders engine</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N360006"/>
</fo:block>
<fo:block margin-left="4.9pc" margin-top="6pt" text-align-last="justify">
<fo:inline font-weight="bold">Appendix</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N370006"/>
</fo:block>
<fo:block margin-left="7.5pc" text-align-last="justify">
<fo:inline font-weight="bold">Layout Samples</fo:inline>
<fo:leader leader-pattern="dots"/>
<fo:page-number-citation ref-id="N390006"/>
</fo:block>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
<fo:page-sequence master-reference="chapter-master">
<fo:static-content flow-name="xsl-region-before">
<fo:block line-height="8pt" font-size="8pt">Swing JavaBuilder - Achieving maximum productivity with minimum code via declarative UIs</fo:block>
</fo:static-content>
<fo:static-content flow-name="xsl-region-after">
<fo:block font-family="Helvetica" font-weight="bold" font-size="10pt" text-align="center">
<fo:page-number/>
</fo:block>
</fo:static-content>
<fo:flow flow-name="xsl-region-body">
<fo:block break-before="page" font-family="Helvetica" font-size="10pt" text-align="left">
<fo:inline border-right-width="0pt" border-left-width="0pt">Swing JavaBuilder</fo:inline>
<fo:inline border-right-width="0pt" border-left-width="0pt">Achieving maximum productivity with minimum code via declarative UIs</fo:inline>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N20006"></fo:inline>Abstract</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1003F"></fo:inline>
<fo:block font-weight="bold">Swing JavaBuilder : making Swing development productive</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
<fo:inline border-right-width="0pt" border-left-width="0pt">
    “Just started on using the Swing JavaBuilder and i must say i like it.
Just replaced 170 rules of Java code with only 13 lines YAML”
  </fo:inline>
<fo:inline font-style="italic">Comment posted the JavaBuilders forum</fo:inline>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The Swing JavaBuilder is a library whose sole goal is to
				maximize the productivity of a Swing developer.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">It's main goal is tackling all the Swing pain points, in
				particular the complexity and verbosity of the API and reducing it
				to the smallest amount of code possible.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">This is accomplished by moving all the boring gruntwork of
				Swing interface creation to an external YAML file, which has a
				1-to-1 match with a backing Java class (e.g. a JFrame or JPanel)
				that is built from that file. This allows to follow a pure MVC
				pattern where the YAML contains nothing but the view, while the Java
				class is (mostly) the controller.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">As an added bonus, the Swing JavaBuilder offers integrated
				support for data binding (using Beans Binding), input validation
				(using Apache Commons Validators), background task processing (using
				SwingWorker) and last but not least, an integrated layout management
				DSL built-on top of the amazing MigLayout layout manager</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In essence, the Swing JavaBuilder is an aggregator of
				best-of-breed Swing solutions into one common, integrated toolkit
				that makes creating Swing user interfaces a breeze</fo:block>
</fo:block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  <fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em"> YAML is a file format that is a superset of JSON. We will cover
				it in more detail in future chapters. It's very simple to
				understand, edit and maintain. It's main advantage over both XML and
				JSON is the lack of any opening or closing tags, since it implements
				hierarchical data relationships via whitespace indentation (similar
				to the Python programming language).</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N30006"></fo:inline>License</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10094"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">All JavaBuilders code is released under the business-friendly Apache 2.0 license.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">It is free to use in all projects, both open source and commercial.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N100A2"></fo:inline>
<fo:block font-weight="bold">Third party libraries</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The Swing JavaBuilder depends on a number of well known open-source components,
			all of which are released under business-friendly licenses such as BSD, Apache or LGPL.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">We never link to any open source components released under viral licenses such as GPL.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Nevertheless, please make sure to evaluate each third party license with your
			legal team to ensure compliance with its terms.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N40006"></fo:inline>Preface</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N100E2"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In 2007 or so, Sun Microsystems announced their JavaFX project,
				which aimed to deliver declarative UIs and rich desktop
				functionality. Unfortunately, in what I've always believed to be a
				severely misguided decision, this was accomplished by introducing a
				totally new language, instead of enhancing the core Java abilities
				and the existing Swing UI toolkit.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">I decided that there had to be a middle-of-the-road approach that
				could give Java UI developers the productivity of declarative UIs
				without the need to throw out their current language skills out and
				focus on an unproved and untested new language (whose
				features I wasn't particularly fond of anyway, but that's a
				different story).
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The JavaBuilders project was a result of this desire. It
				started off with many weeks of research and evaluation of different
				options. This resulted finally in the creation of a generic
				declarative UI based around the YAML format (which has many
				advantages over the XML or JSON formats) and the integration of many
				leading open source libraries (for features such as databinding or
				input validation) into one integrated solution.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The Swing JavaBuilder is the first production-ready
				implementation of the JavaBuilder engine, but it's generic nature
				allows it to be configured for other UI toolkits as well. In the
				future a SWT JavaBuilder is planned (and maybe even GTK+ and Qt
				versions as well).
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">I hope its adoption by you and your team will greatly increase
				your productivity and ensure a long and healthy future for Java rich
				client development.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
<fo:inline font-weight="bold">Jacek Furmankiewicz</fo:inline>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
<fo:inline font-style="italic">JavaBuilders Technical Architect</fo:inline>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N50006"></fo:inline>Installation</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10133"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Start off with downloading the latest Swing JavaBuilder ZIP file distribution off
			the JavaBuilders.org website.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In the root folder you will find the Swing JavaBuilder jar and in the /lib
			folder you will find all of its dependencies. Add all of them to your project's
			classpath.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In the /samples folder you will find a sample application that you can use
			to get a better understanding of how you can build complex user interfaces
			using this library.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N60006"></fo:inline>Overview</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1016C"></fo:inline>
<fo:block font-weight="bold">What is JavaBuilders all about?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				In short any object that is built using a JavaBuilder consists of
				two files:
				<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
						a
						<fo:inline font-family="Courier">YAML</fo:inline>
						text file that provides a declarative definition of the subject,
						most commonly the user interface. This would include items such as
						the controls that get instantiated, their properties, which
						methods should be called from event listeners, layout definition,
						data binding definition, predefined validations on controls or
						their properties.
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
						a
						<fo:inline font-family="Courier">Java</fo:inline>
						class with all the actual code that represents the object being
						built. So for example, in
						<fo:inline font-family="Courier">Swing JavaBuilder</fo:inline>
						the Java class may be a
						<fo:inline font-family="Courier">JFrame</fo:inline>
						with all the relevant methods (e.g.
						<fo:inline font-family="Courier">save(), close(), validateInput()</fo:inline>
						, as well as public properties that refer to the data being
						entered/maintained in the window).
					</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Using a convention over configuration approach inspired by the
				Apache Wicket web framework, both files reside in the same package
				and with the same name, but just with a different file extension,
				e.g.:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
MainApplicationFrame.java
MainApplicationFrame.yaml
			</fo:block>
			     If you are using an inner class, e.g.
			 <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public class CommonPanels
{
  public static class SomePanel
  {
    SwingBuilder.build(this);
  }
}
			 </fo:block>
then you can define a YAML file using the <fo:inline font-family="Courier">"DeclaringClass.InnerClass.yaml"</fo:inline> format, e.g.
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
CommonPanels.SomePanel.yaml
</fo:block> 
                in order to build an instance of the inner class.			   
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			Alternatively, you may even specify a build file explicitly by using the class-level <fo:inline font-family="Courier">@BuildFile</fo:inline>
			annotation, which accepts a local or absolute file path within the classpath:
			<fo:block font-weight="bold">Local package file path</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
@BuildFile("Common.yaml")
public class LocalBuildFilePanel extends JPanel
			</fo:block>
			or:
			<fo:block font-weight="bold">Absolute file path</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
@BuildFile("/org/javabuilders/test/resources/Common.yaml")
public class GlobalBuildFilePanel extends JPanel 
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N101E0"></fo:inline>
<fo:block font-weight="bold">Why would I use this instead of regular coding by hand?
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Because you will have to write a lot less code to the same
				thing if you use a JavaBuilder. This is what it's all about.</fo:block>
</fo:block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  <fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The YAML file contains only a declaration of the interface,
				which methods (on the Java side) should be fired when the user
				pressed a button, data binding instructions, data validation
				definitions, etc. It has zero code (of any type, Java, Javascript,
				etc.) embedded in it. The idea is that 100% of actual code you write is in the Java file and nowhere else.</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="NB0006"></fo:inline>YAML</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10250"></fo:inline>
<fo:block font-weight="bold">What is YAML?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				I discovered YAML while reading about Ruby on Rails. It is used by
				that web framework as the default file format for all configuration
				files. It has a very simple approach to define hierarchical data
				structures/maps/list, based on straightforward whitespace
				indentation. Also, it handles text transparently. There is usually
				no need to input text in quotes, you can just type it as is, e.g.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">text: This is the text for my control</fo:block>
				The only time you need to escape into quotes is if your text
				contains YAML-reserved characters such as ":", e.g.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt"> text: "First name:"</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1026B"></fo:inline>
<fo:block font-weight="bold">Whitespace indentation</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Unless you are a Python programmer, the concept of anything
				that relies on whitespace probably makes you uncomfortable. Trust
				me, it's actually very simple to get used to it, does not require
				any particularly specialized development tools. The main benefit of
				whitespace indentation is that it automatically handles defining the
				"end" of an item (hence there is no need for XML-closing tags or
				JSON-closing brackets).</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10279"></fo:inline>
<fo:block font-weight="bold">Why not XML?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">It is simply too verbose. Too much typing. Most of the file
				seems to be tags and closing tags instead of the content. In YAML
				the majority of the file is the actual content (and the whitespace
				of course).</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10287"></fo:inline>
<fo:block font-weight="bold">Why not JSON?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">JSON is very concise and the perfect tool for let's say
				invoking Ajax requests. However, for maintainable files it suffers
				from what I call "closing bracket hell", especially when dealing
				with complex object graphs. Every type needs to be closed with a "}"
				and every collection needs to be opened and closed with a "[" and
				"]". Once you start mixing the two together you start having
				horrendous closing statements such as this:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">              }
             }
            ]
           }
          ]
         }
        ]
       }
				</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Scroll to the bottom of this JavaFX code sample to see what
				I mean: http://jfx.wikia.com/wiki/JFXPresentation</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N102A0"></fo:inline>
<fo:block font-weight="bold">YAML is a superset of JSON</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em"> Although YAML relies on whitespace indentation to indicate
				hierarchy, you can at any point in the document switch to JSON-style
				brackets. This allows to keep the file shorter and more concise and
				should be used on all bottom-level nodes (i.e. those that have no
				children).</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Pure whitespace YAML example:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame:
   name: myFrame
   title: My Frame
   content:
       - JLabel: 
           name: myLabel2
           text: My First Label
       - JLabel:
           name: myLabel2
           text: My Second Label				
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The same content can be compressed using JSON-style brackets
				to:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame:
   name: myFrame
   title: My Frame
   content:
       - JLabel: {name: myLabel2, text: My First Label}
       - JLabel: {name: myLabel2, text: My Second Label}			
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">However, in most cases you will not be coding in either
				traditional YAML or JSON. We have enhanced the standard YAML syntax
				to make it even more compact (more on that in the next sections). In
				most cases your YAML content will look like this:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=myFrame,title=My Frame):
    - JLabel(name=myLabel2, text=My First Label)
    - JLabel(name=myLabel2, text=My Second Label)			
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">This is still valid YAML syntax and our custom YAML
				pre-processor takes care of "exploding" this compact syntax to the
				equivalent "full" YAML content</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N102D4"></fo:inline>
<fo:block font-weight="bold">Tabs in YAML</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Tabs are simply not allowed in YAML, period. You always indent
				using explicit whitespace. Putting a tab into a YAML file will cause
				it to fail to parse</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N102E2"></fo:inline>
<fo:block font-weight="bold">YAML syntax samples</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Values:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt"> text: Some text</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Maps:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame:
   name: myFrame
   title: My Frame			
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Lists (via the "-" indicator):</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
    content:
        - Item1
        - Item2 : {somePropertyForItem2: someValueforItem2}			
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Free-form text with new lines preserved (accomplished
				with the "|" indicator):</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
   quote: |
      To code by hand or not?
      There is no question.
      You should just be using JavaBuilders.
                   Will Shakespeare (JavaBuilders early adopter)			
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10317"></fo:inline>
<fo:block font-weight="bold">Related links</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">YAML on Wikipedia:
			<fo:inline color="blue">
<fo:basic-link external-destination="http://en.wikipedia.org/wiki/YAML">http://en.wikipedia.org/wiki/YAML</fo:basic-link>
</fo:inline>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="NC0006"></fo:inline>Compact YAML syntax</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1035E"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Although the base YAML format is already pretty concise,
				JavaBuilders adds a custom extension to it that we call "virtual
				constructor flow", otherwise referred to simply as compact YAML. It
				allows to specify the child properties of an object in the same line
				of text as the object definition.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Here's a pure YAML example:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame:
   name: frame
   title: My Frame
   content:
       - JButton:
            name: buttonClose
            text: Close
            onAction: close
       - JButton:
            name: buttonSave
            text: Save
            onAction: save			
			</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				The same content can be entered in much less lines using our compact
				syntax:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame,title=My Frame):
    - JButton(name=buttonClose,text=Close,onAction=close)
    - JButton(name=buttonSave,text=Save,onAction=save)			
			</fo:block>
				Let's be clear: this is not part of the official YAML standard. This
				is something specific to JavaBuilders that was added to make the
				YAML file even smaller.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1037E"></fo:inline>
<fo:block font-weight="bold">Basic concepts</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>properties and their values are entered between ( and
						) on the same line as the object they refer to</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
						instead of the default YAML
						<fo:inline font-family="Courier">"name: value"</fo:inline>
						format it uses
						<fo:inline font-family="Courier">"name=value"</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
						instead of the default YAML collection indicator
						<fo:inline font-family="Courier">[</fo:inline>
						and
						<fo:inline font-family="Courier">]</fo:inline>
						(e.g.
						<fo:inline font-family="Courier">"list: [listItem1, listItem2]"</fo:inline>
						) it uses regular brackets, e.g.
						<fo:inline font-family="Courier">"list=(listItem1,listItem2)"
						</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>if an object has a collection of object defined directly
						underneath it, they automatically get moved to the default
						"content" node (just as in the example shown above)</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  <fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">All the code samples from this point will use the compact
						syntax, in order to promote its use.</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="ND0006"></fo:inline>Development tools</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N103FF"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				JavaBuilders requires just any decent Java IDE with a YAML editor.
				Remember to select fixed width font (e.g.
				<fo:inline font-family="Courier">Courier New, Monospaced</fo:inline>
				) for the editor, otherwise you will not be able to line up the
				spacing correctly in the file.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1040E"></fo:inline>
<fo:block font-weight="bold">Eclipse</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Eclipse YAML Editor: http://code.google.com/p/yamleditor/
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1041C"></fo:inline>
<fo:block font-weight="bold">NetBeans</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">As of NetBeans 6.5 a YAML editor is included in the core
				distribution.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1042A"></fo:inline>
<fo:block font-weight="bold">IntelliJ IDEA</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">A YAML editor is included in the core distribution.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="NE0006"></fo:inline>Benefits</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10469"></fo:inline>
<fo:block font-weight="bold">What are the benefits compared to coding by hand?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">You have to write a lot less code. JavaBuilders introduces dynamic language-level productivity (think Ruby/Groovy) to Java. 
		See this typical Java Swing example: 
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
ResourceBundle bundle = ResourceBundle.getBundle("Resources");

JButton button = new JButton();
button.setName("okButton");
button.setText(bundle.getString("button.ok"));
button.addActionListener(new ActionListener() {

        public void actionPerformed(ActionEvent e) {
                //execute the save method
                save();
        }
        
});		
		</fo:block>
		The equivalent compact YAML content would be just: 
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(name=okButton,text=button.ok,onAction=save)		
		</fo:block>
		and all you need to build this Swing Java class from this YAML file is this single line
		of code somewhere in your constructor:
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.build(this);
		</fo:block>
		The equivalent code for any other UI toolkit (e.g. SWTJavaBuilder) would be just as compact.
		</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1048C"></fo:inline>
<fo:block font-weight="bold">What are the benefits compared to using GUI Builders, such as NetBeans Matisse?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Mostly maintainability. For smaller examples it's probably not much of a difference 
		(since so much of the code is generated for you by Matisse), but once you get into larger, more 
		complex forms it becomes harder to maintain them in a GUI builder, especially if you have to move 
		the layout around a lot.  In JavaBuilders, it's just a matter of changing a few lines of text 
		in a YAML file.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Also, e can add "custom" properties to existing objects, so we can enhance APIs or make them 
		easier, e.g.:
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(size=800x400)
		</fo:block>		
		The Swing JFrame class does not have a property called "size". But JavaBuilders can support 
		virtual properties which trigger some Java code that will magically call the proper 
		equivalent methods, in order to achieve the same functionality in much less code.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Last, but not least, JavaBuilders provide support for functionality not provided by
		GUI builders, such as integrated input validators or executing cancellable long running methods 
		on a background thread.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="NF0006"></fo:inline>Drawbacks</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N104DC"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Nothing is perfect, so JavaBuilders have weak points too.
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Lose some of the static, compile-time safety: since you are
						defining all the layouts/event wiring in a YAML text file, some of
						the referenced objects may have a different name that their
						corresponding equivalents in the Java file, especially if using
						refactoring. This can be overcome with the @Alias annotation,
						which hardcodes a link between a Java-side object and its
						definition in the YAML file.</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>No code completion (at least not yet). YAML is just a pure
						text file. You won't know what the known properties are for any
						particular object type unless you know them already. But in most
						cases it's the basic ones: name, text, onAction, onClicked, etc.
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>You have to get acquainted with YAML...sorry, can't help you
						there. Sometimes we just need to learn new things. The bottom line
						though is that all your code stays in Java, YAML is just used for
						declarative UI building.</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">On the upside, UI components built with JavaBuilders are easily unit testable.
			You just need to do <fo:inline font-family="Courier">new MyComponent()</fo:inline> in your unit test, that's all.
			When an object is built, the JavaBuilder automatically validates that not only
			the properties are defined correctly, but also all the event listeners point to
			actual existing methods in the Java class. If not, a <fo:inline font-family="Courier">BuildException</fo:inline>
			will be thrown right away.</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N100006"></fo:inline>Swing JavaBuilder in 60 seconds or less</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10539"></fo:inline>
<fo:block font-weight="bold">Is it worth my time?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Here's a sample of what you can do with the Swing JavaBuilder in 60 seconds or less.
			Hopefully, it will make it clear as to what the productivity benefits are.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">To show off its abilities we will create a simple app that prompts for a person's
			data and simulates saving it to a database via a long running task on a background thread.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1054C"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>1. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Download the latest Swing JavaBuilder ZIP from 
					<fo:inline color="blue">
<fo:basic-link external-destination="http://javabuilders.org">http://javabuilders.org</fo:basic-link>
</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>2. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>In Eclipse, create a new Java project called "PersonApp"
					and create a default package "person.app"</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>3. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Add the Swing JavaBuilder jar and all of its dependencies
					(from the "/lib" folder) to the project's build path</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>4. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Create the Person class that will represent our model
					<fo:block font-weight="bold">person/app/Person.java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
package person.app;

import java.text.MessageFormat;

public class Person {

	private String firstName;
	private String lastName;
	private String emailAddress;
	
	/**
	 * @return the firstName
	 */
	public String getFirstName() {
		return firstName;
	}
	/**
	 * @param firstName the firstName to set
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	/**
	 * @return the lastName
	 */
	public String getLastName() {
		return lastName;
	}
	/**
	 * @param lastName the lastName to set
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	/**
	 * @return the emailAddress
	 */
	public String getEmailAddress() {
		return emailAddress;
	}
	/**
	 * @param emailAddress the emailAddress to set
	 */
	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}
	
	@Override
	public String toString() {
		return MessageFormat.format("{0} {1} : {2}", getFirstName(), getLastName(), getEmailAddress());
	}

}
					</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>5. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Create a "PersonApp.properties" file in the root package with the
					internationalized resources:
					<fo:block font-weight="bold">PersonApp.properties</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
button.save=Save
button.cancel=Cancel

label.firstName=First Name:
label.lastName=Last Name:
label.email=Email
					</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>6. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Create the view YAML file PersonApp.yaml:
					<fo:block font-weight="bold">person/app/PersonApp.yaml</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame, title=frame.title, size=packed, defaultCloseOperation=exitOnClose):
    - JLabel(name=fNameLbl, text=label.firstName)
    - JLabel(name=lNameLbl, text=label.lastName)
    - JLabel(name=emailLbl, text=label.email)
    - JTextField(name=fName)
    - JTextField(name=lName)
    - JTextField(name=email)
    - JButton(name=save, text=button.save, onAction=($validate,save,done))
    - JButton(name=cancel, text=button.cancel, onAction=($confirm,cancel))
    - MigLayout: |
        [pref]     [grow,100]   [pref]     [grow,100] 
        fNameLbl   fName        lNameLbl   lName
        emailLbl   email+*
        &gt;save+*=1,cancel=1
bind:
    - fName.text: this.person.firstName
    - lName.text: this.person.lastName
    - email.text: this.person.emailAddress
validate:
    - fName.text: {mandatory: true, label: label.firstName}
    - lName.text: {mandatory: true, label: label.lastName}
    - email.text: {mandatory: true, emailAddress: true, label: label.email}			
					</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>7. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Create the controller Java class PersonApp
					<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
package person.app;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;

import org.javabuilders.BuildResult;
import org.javabuilders.annotations.DoInBackground;
import org.javabuilders.event.BackgroundEvent;
import org.javabuilders.event.CancelStatus;
import org.javabuilders.swing.SwingJavaBuilder;

public class PersonApp extends JFrame {

	private Person person;

	private BuildResult result;
	
	public PersonApp() {
		person = new Person();
		person.setFirstName("John");
		person.setLastName("Smith");
		result = SwingJavaBuilder.build(this);
	}

	public Person getPerson() {
		return person;
	}
	
	private void cancel() {
		setVisible(false);
	}
	
	@DoInBackground(cancelable=true, indeterminateProgress=false, progressStart=1, progressEnd=100)
	private void save(BackgroundEvent evt) {
		//simulate a long running save to a database
		for(int i = 0; i &lt; 100; i++) {
			//progress indicator
			evt.setProgressValue(i + 1);
			evt.setProgressMessage("" + i + "% done...");
			
			//check if cancel was requested
			if (evt.getCancelStatus() != CancelStatus.REQUESTED) {
				
				//sleep
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {}
				
			} else {
				//cancel requested, let's abort
				evt.setCancelStatus(CancelStatus.COMPLETED);
				break;
			}
		}
	}
	
	//runs after successful save
	private void done() {
		JOptionPane.showMessageDialog(this, "Person data: " + person.toString());
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				//activate internationalization
				SwingJavaBuilder.getConfig().addResourceBundle("PersonApp");
				try {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
					new PersonApp().setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
}
					</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>8. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Run the PersonApp.main() method. You should see an input dialog
					like this appear:
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.gif)"/>
</fo:block>
<fo:block/>
					Notice that the default person name is propagated from the Java code to the UI via data binding. Also, all the controls are created and the
					layout is executed without the need for an IDE-specific GUI builder.
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>9. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Enter an invalid email address for the person and press Save:
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.validation.gif)"/>
</fo:block>
<fo:block/>
					The validation logic (invoked via <fo:inline font-family="Courier">"$validate"</fo:inline>) executed and perform basic input validation.
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>10. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Enter a valid email address:
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.2.gif)"/>
</fo:block>
<fo:block/>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>11. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Press "Save". The <fo:inline font-family="Courier">save()</fo:inline> Java method is executed (which simulates a long running database save with a progress bar) and since it is
					annotated with the <fo:inline font-family="Courier">@DoInBackground</fo:inline> annotation it will automatically run on a background thread using the SwingWorker library.
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.3.gif)"/>
</fo:block>
<fo:block/>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>12. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>After the save logic executes, the <fo:inline font-family="Courier">done()</fo:inline> Java method is executed to inform the user the save was successful. Notice that the
					email address we entered was automatically propagated back to the underlying bean using databinding.
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.4.gif)"/>
</fo:block>
<fo:block/>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>13. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Press 'Cancel' to close the window. Since you specified <fo:inline font-family="Courier">"$confirm"</fo:inline> in the action handler, it will automatically prompt the user to
					confirm the action. If they select "Yes", the <fo:inline font-family="Courier">cancel()</fo:inline> Java method will be called and the window will close.
					<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(swing/img/person.app.5.gif)"/>
</fo:block>
<fo:block/>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10606"></fo:inline>
<fo:block font-weight="bold">Summary</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>22 lines of YAML</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>3 simple Java methods to handle <fo:inline font-family="Courier">save(), done() and cancel()</fo:inline> (and without any of the logic to create and layout the controls)</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
				That is all we needed to create a fully functional application with control creation and layout, data input validation and executing long running
				business methods on a background thread via SwingWorker. Not to mention it's fully localized with all the labels being automatically fetched from a <fo:inline font-family="Courier">ResourceBundle</fo:inline>
				without any additional coding overhead.
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N110006"></fo:inline>Core Features</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N120006"></fo:inline>Obtaining references to created components</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N106E8"></fo:inline>
<fo:block font-weight="bold">Convention over configuration</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In most cases, we use a straightforward
				convention-over-configuration approach. If you define an object in
				YAML and then define a Java instance instance variable with the same
				name and of compatible type, then JavaBuilders will set the
				reference on it automatically (even if it is a private variable, it
				does not need to be public).</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Simple example:</fo:block>
<fo:block font-weight="bold">MyFrame.yaml</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame:
    - JButton(name=okButton,text=OK,onAction=save)		
		</fo:block>
<fo:block font-weight="bold">MyFrame.java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public class MyFrame extends JFrame {

    //this object's reference will be set automatically
    private JButton okButton;  
    private BuildResult result = SwingJavaBuilder.build(this)

    public MyFrame(){
     
        //reference is set! NullPointerException will not occur
        okButton.setText("New text"); 
    }

    private void save() {
       //execute some business logic...
    }
}		
		</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10709"></fo:inline>
<fo:block font-weight="bold">Obtaining references manually</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				You can also just fetch the object reference manually from the
				returned
				<fo:inline font-family="Courier">BuildResult</fo:inline>
				object:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public MyFrame()  {
     JButton okButton = (JButton)result.get("okButton");
}		
		</fo:block>
				But the convention over configuration approach is much preferred.
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N130006"></fo:inline>Hooking up event listeners to Java methods</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10755"></fo:inline>
<fo:block font-weight="bold">Overview</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				The standard approach is to provide a standard "onEvent" property
				(e.g. "onAction", "onClicked", "onDoubleClicked") and then pass it a
				single method name or a collection of method names.
				<fo:block font-weight="bold">Single method</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(text=OK, onAction=save)		
		</fo:block>
<fo:block font-weight="bold">Multiple methods to be executed in sequence</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(text=OK, onAction=(validateInput,save,close))
		</fo:block>
				If any of the methods return a boolean
				<fo:inline font-weight="bold">false</fo:inline>
				, then the other methods get aborted and will not be called. Simple
				convention over configuration approach
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10778"></fo:inline>
<fo:block font-weight="bold">Mapping to methods on the Java side</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				When you specify a method name (e.g. "save") in the YAML file, it
				will attempt to execute the corresponding method in the Java class.
				Different signatures of the method are supported, in order of
				preference:
				<fo:block font-weight="bold">method(calling object type or its superclass, event specific class)</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private void save(JButton button, ActionEvent event) {}		
		</fo:block>
<fo:block font-weight="bold">method(event specific class)</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private void save(ActionEvent event) {}
		</fo:block>
<fo:block font-weight="bold">method(calling object type or its superclass)</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private void save(JButton button) {}		
		</fo:block>
<fo:block font-weight="bold">method()</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private void save() {}		
		</fo:block>		
Enter whichever one you want and JavaBuilders will find it and execute it. 
If it finds multiple ones, it will execute the first one it finds based on the preference above.
If none are found, a BuildException will  be thrown <fo:inline font-weight="bold">right away during build time</fo:inline>. So, you do
not have to actually test your event listener logic by manually clicking on the button or menu item,
the validation occurs right away as part of the build process. This simplifies unit testing and limits
the risk of lost type safety.
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N140006"></fo:inline>Databinding</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N107DA"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Binding is defined by adding a "bind" root node after all
				the controls have been defined. Unlike in most other languages, the
				binding is not defined at the property level, but is a stand-alone
				node of its own. This is done to enforce separation of concerns and
				ensure clarity. You can see all your data binding in one place, all
				together.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Sample (assume we have a backing
				<fo:inline font-family="Courier">JFrame JavaBean</fo:inline>
				with two public properties "lastName" and "firstName"):
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame,title=Hallo):
    content:
       - JLabel(name=firstNameLabel, text="First name", labelFor=firstNameField)
       - JTextField(name=firstNameField)
       - JLabel(name=lastNameLabel, text="Last name", labelFor=lastNameField)
       - JTextField(name=lastNameField)
       - JButton(name=saveButton, text=Save)
    layout: |            
      []                 [grow]     
      &gt;firstNameLabel    firstNameField
      &gt;lastNameLabel     lastNameField
      &gt;saveButton+*    
bind:
    - this.title : "Hello, ${firstNameField.text}" #bind the frame title to show last name   using an EL expression
    - this.firstName : firstNameField.text         #bind the public Java property to the text field's text value, using a direct simple expression
				</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N107F4"></fo:inline>
<fo:block font-weight="bold">Databinding requirements</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In order for the binding to work between public properties, they
				must fire a "property change" event on the "set" and the parent
				class must provide the "addPropertyChangeListener" and
				"removePropertyChangeListener" methods. This is all part of the
				standard BetterBeansBinding requirements.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">A good example can be found in the Bound Properties Java tutorial:
			http://java.sun.com/docs/books/tutorial/javabeans/properties/bound.html
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10807"></fo:inline>
<fo:block font-weight="bold">Supported features</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In order to integrate as best as possible with each UI toolkit, JavaBuilders rely
			on the best toolkit-specific library for databinding. This means that the Swing JavaBuilder
			uses BetterBeansBinding (the actively maintained fork of JSR 295), while the SWT JavaBuilder uses JFace DataBinding.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Not all databinding engines provide the same functionality. For example, Beans Binding
			does provide support for EL expressions in data binding (hence you can use them for
			the Swing JavaBuilder), but the JFace Databinding engine does not (and therefore they
			are not supported for the SWT JavaBuilder).</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N150006"></fo:inline>Input validation</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1084B"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Similar to data binding, input validation is configured via a
				separate root level node called
				<fo:inline font-family="Courier">validate</fo:inline>:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame,title=Binding Frame,size=packed):
    content:
        - JLabel(name=fnLbl, text="First name:")
        - JTextField(name=fName)
        - JLabel(name=lnLbl, text="Last name:")
        - JTextField(name=lName)
        - JButton(name=ok, text=OK, onAction=($validate,save,cancel))
        - JButton(name=cancel, text=Cancel, onAction=cancel)
        - MigLayout: |
           []      [grow,200px]
           &gt;fnLbl  fName
           &gt;lnLbl  lName         
           &gt;ok+*=1,cancel=1      [grow,bottom]
bind:
    - firstName: fName.text
    - lastName: lName.text
validate:
    - fName.text: {label: First Name, mandatory: true, minLength : 5}  			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10860"></fo:inline>
<fo:block font-weight="bold">Invoking input validation</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				If you want to do in from the YAML file, just put
				<fo:inline font-family="Courier">$validate</fo:inline>
				as the method name in any event handler, e.g.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(name=saveBtn,text=Save,onAction=($validate,save,close))
			</fo:block>
				If you want to do it from the Java then you just need to call the
				<fo:inline font-family="Courier">validate()</fo:inline>
				method on the
				<fo:inline font-family="Courier">BuildResult</fo:inline>
				object that was returned:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private BuildResult result = SwingJavaBuilder.build(this);

//validate user input
private boolean validate() {
    return result.validate();
}
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1088D"></fo:inline>
<fo:block font-weight="bold">Field label for error messages</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				The "label" property is used to define the name of the field that
				will be using in any error messages. It is localizable, so you can
				sent it a resource key instead, e.g.:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
validate:
    - fName.text: {label: label.firstName, mandatory: true, minLength : 5}  			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N108A1"></fo:inline>
<fo:block font-weight="bold">Validator routines</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The following validator routines are currently available</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" font-weight="bold" text-align="center" padding="2pt" background-color="silver" start-indent="2pt" column-number="1">
<fo:block font-size="10pt">Validation type</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" font-weight="bold" text-align="center" padding="2pt" background-color="silver" start-indent="2pt" column-number="2">
<fo:block font-size="10pt">Example</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" font-weight="bold" text-align="center" padding="2pt" background-color="silver" start-indent="2pt" column-number="3">
<fo:block font-size="10pt">Comment</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">mandatory</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">mandatory: true</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">minLength</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">minLength : 5</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">maxLength</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">maxLength : 5</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">regex</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">regex: "[a-zA-Z0-9]+"</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt">Uses default validation message</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt"/>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">regex: "[a-zA-Z0-9]+", regexMessage: "''{0}'' must be a number or letter"</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt">Uses custom error messagee</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">minValue</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">minValue: 5</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">maxValue</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">maxValue: 50</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">dateFormat</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">dateFormat: yyyy/mm/dd</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">emailAddress</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">emailAddress: true</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="3">
<fo:block font-size="9pt"/>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10969"></fo:inline>
<fo:block font-weight="bold">Full example</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
validate:
    - mandatory.text: {label: Mandatory Field, mandatory: true}
    - date.text: {label: Date Field, dateFormat: "yyyy/mm/dd"}
    - email.text: {label: E-Mail, email: true}
    - minmax.text: {label: Min/Max Length, minLength: 5, maxLength: 10}
    - regex.text: {label: Regex, regex: "[a-zA-Z0-9]+"}
    - regex2.text: {label: Regex, regex: "[a-zA-Z0-9]+", regexMessage: "''{0}'' must be a number or letter"}
    - long.text: {label: Min/Max Long, minValue: 5, maxValue: 50, mandatory: true}			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1097C"></fo:inline>
<fo:block font-weight="bold">Adding custom validators</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">The default validator routines not powerful enough for you? You can easily add custom validation logic to be executed together with the built-in routines via Java-side code: 
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
result.getValidators().add(new ICustomValidator() {

    public void validate(Object value, ValidationMessageList list) {
        if (!isValid) {
                list.add(new ValidationMessage("Input is not valid 'cause I say so"));
        }
    }
});			
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N160006"></fo:inline>Executing long running methods on a background thread</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N109C1"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">A common issue in most UI toolkits is that the application locks
				up if a long running process is running on the EDT (Event Dispatch
				Thread). In this case, the recommended solution is to execute it on
				a background thread and if possible, provide some sort of progress
				indicator to the user letting them know about the current status of
				this process (e.g. saving large amounts of data to a database).</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N109CA"></fo:inline>
<fo:block font-weight="bold">Method Annotation</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				In JavaBuilders, this is accomplished by simply annotating the long
				running method with a
				<fo:inline font-family="Courier">@DoInBackground</fo:inline>
				annotation (which provides some attributes that can customize how
				the long running process is handled).
			</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
public @interface DoInBackground {
        /**
         * @return Progress message
         */
        String progressMessage() default "label.processing";

        /**
         * @return If background task is cancelable or not
         */
        boolean cancelable() default false;
        /**
         * @return Default start value for progress bar
         */
        int progressStart() default 1;
        /**
         * @return Default end value for progress bar
         */
        int progressEnd() default 100;
        /**
         * @return Current progress value
         */
        int progressValue() default 1;
        /**
         * @return Indicates if task should block UI with a popup or not
         */
        boolean blocking() default true;
        /**
         * @return Indicates to show indeterminate progress indicator. Overrides the progress start/end/value if set to true
         */
        boolean indeterminateProgress() default true;
}
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				Any method that is annotated as such must implement a signature that
				accepts an object of type
				<fo:inline font-family="Courier">BackgroundEvent</fo:inline>
				, which allows the background method to communicate with the UI's
				progress indicator and even cancel itself, if the user requests it,
				e.g.:
			</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
@DoInBackground(cancelable=true, progressStart=1, progressEnd=100, progressValue=1, indeterminateProgress=false)
private void save(BackgroundEvent evt) {
        System.out.println("SAVE...");
        for(int i = 0; i &lt; 100; i++) {

                if (evt.getCancelStatus() != CancelStatus.REQUESTED) {
                        try {
                                Thread.currentThread().sleep(100);
                                evt.setProgressValue(i + 1);
                                evt.setProgressMessage(String.format("Processing %s of %s...", 
                                evt.getProgressValue(), evt.getProgressEnd()));
                        } catch (InterruptedException e) {}
                } else {
                        evt.setCancelStatus(CancelStatus.PROCESSING);
                        System.out.println("Cancelling...");
                        evt.setCancelStatus(CancelStatus.COMPLETED);
                        break;
                }
        }
        System.out.println("SAVE END...");
}
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N109F5"></fo:inline>
<fo:block font-weight="bold">Executing multiple methods together</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">A typical scenario in an input dialog that occurs when a user presses the Save button is: 
			<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>1. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>validate input</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>2. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>save the data (this can take a long time)</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>3. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>close the window</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
			The way to handle this is to have the button execute multiple methods in sequence, e.g.: 
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(text=Save,onAction=($validate,save,close))			
			</fo:block>
			On the Java side, the long running method is annotated as such: 
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
@DoInBackground(indeterminateProgress=true)
private void save() { //long running process }

private void close() {
    setVisible(false);
    dispose();
}			
			</fo:block>
			The methods <fo:inline font-weight="bold">after</fo:inline> the long running method (i.e. <fo:inline font-family="Courier">"close"</fo:inline> in this 
			example), will only execute <fo:inline font-weight="bold">after</fo:inline> the long running method has finished, 
			they will not run in parallel, even though they are on different threads. 
			Hence, the sequence of events is preserved. 
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10A37"></fo:inline>
<fo:block font-weight="bold">Domain-specific Implementations</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In Swing JavaBuilder, long running methods are handled by using the standard 
			<fo:inline font-family="Courier">SwingWorker</fo:inline> library. A Swing progress dialog will popup up 
			informing the user that a process is running. If the method flagged itself as cancelable, 
			the Cancel button on the progress dialog will be enabled, allowing the user to cancel 
			the task if it runs for too long.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">For the SWT JavaBuilder the plan is to support something similar or alternatively
			plug into the JFace Progress/Tasks API.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">As you can see, JavaBuilders does not have a "one size fits all" approach and for 
			each toolkit we plan to use the best option available on that specific
			platform.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N170006"></fo:inline>Internationalization</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10A86"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Internationalizaton support in any Builder is
				provided at two levels: global and class-level. If any resource
				bundle is present (either at the global or class level), the
				internationalization support will automatically get activated.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10A8F"></fo:inline>
<fo:block font-weight="bold">Global Resource Bundles</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				In your main() just add the list of global application resource
				bundles to the configuration of your builder, e.g.:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.getConfig().addResourceBundle("Resources");			
			</fo:block>
				or:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
ResourceBundle myResourceBundle = ....
SwingJavaBuilder.getConfig().addResourceBundle(myResourceBundle);			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10AAA"></fo:inline>
<fo:block font-weight="bold">Class-level Resource Bundles</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				If you need to have additional class-level resource bundles, just
				pass them in during the buld request:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private ResourceBundle bundle = ResourceBundle.getBundle("MyClassBundle");
private BuildResult result = SwingJavaBuilder.build(this, bundle);			
			</fo:block>
				The builder will look at the class-level bundles first for a key and
				if not found, will search through the global ones.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10ABF"></fo:inline>
<fo:block font-weight="bold">Usage</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Once you register a resource bundle, you can pass a resource name directly to any of the properties that have been flagged as localizable, e.g.
			<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(name=okButton, text=button.ok)			
			</fo:block>
<fo:block font-weight="bold">Properties file</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
button.ok=OK			
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N180006"></fo:inline>Enum property values</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10B0C"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em"> When building an object, if the specified property type is an
				Enum of any sort, the builder will automatically allow you to enter
				it just using the enum constant, without the actual enum name
				prefix.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10B15"></fo:inline>
<fo:block font-weight="bold">Enums defined like constant Integers</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
//enum defined like static int constants
enum StartPosition{ CENTER_IN_SCREEN, CENTER_IN_PARENT, MANUAL }
			</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JXFrame.setStartPosition(StartPosition position)			
			</fo:block>
				In YAML, you can do then either:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JXFrame(startPosition=CENTER_IN_PARENT)			
			</fo:block>
				or the Java camel-case named equivalent:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JXFrame(startPosition=centerInParent)			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10B3C"></fo:inline>
<fo:block font-weight="bold">Enums defined using Pascal case</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				If your enum is defined instead using a Pascal case syntax, e.g.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
//enum defined like static int constants
enum StartPosition{ CenterInScreen, CenterInParent, Manual}
			</fo:block>
				then you can still do either the original constant value or the
				camel-case named equivalent:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JXFrame(startPosition=CenterInParent)
			</fo:block>
				or:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JXFrame(startPosition=centerInParent)			
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N190006"></fo:inline>Static int constant property values</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10B8F"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Similar to the way Enum values are handled, the default
				behaviour is that when a String value is passed to an <fo:inline font-family="Courier">int</fo:inline> property,
				the builder will attempt to find a corresponding <fo:inline font-family="Courier">final static int</fo:inline>
				value on the Java class and use that. Both camel-case values and
				actual static constant names can be used, e.g.:</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(defaultCloseOperation=EXIT_ON_CLOSE)				
				</fo:block>
				or:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(defaultCloseOperation=exitOnClose)				
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N1A0006"></fo:inline>Using custom components</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10BE2"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Sooner or later you will want to create a custom component
				instance from within your YAML file. However, the current builder
				does not know how to map your custom component name (e.g.
				"MyCustomPanel") to an actual Java class.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em"> In order to let it know all you have to do is define an instance
				variable with the same type in your Java-side code and it will
				automatically find the corresponding class definition that way, e.g.
				<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(title=frame.title,state=max,defaultCloseOperation=exitOnClose):
    - ComponentsPanel(name=componentsPanel,tabTitle=tab.components)
    - BorderPanel(name=borderPanel,tabTitle=tab.borders)
    - CardLayoutPanel(name=cardLayoutPanel,tabTitle=tab.cardLayout)       
    - FlowLayoutPanel(name=flowLayoutPanel,tabTitle=tab.flowLayout)
    - MigLayoutPanel1(name=migLayoutPanel1,tabTitle=tab.migLayout1)				
				</fo:block>
<fo:block font-weight="bold">Java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private ComponentsPanel componentsPanel;
private FlowLayoutPanel flowLayoutPanel;
private CardLayoutPanel cardLayoutPanel;
private MigLayoutPanel1 migLayoutPanel1;
private BorderPanel borderPanel;				
				</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
			If your custom component variable is <fo:inline font-family="Courier">null</fo:inline> then the builder will create a brand new instance.
			If it has already been pre-instantiated, the builder will use the existing instance instead (matching it by type and name).
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N1B0006"></fo:inline>Custom global commands</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10C3A"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Custom global commands allows you to basically define a
				named reusable piece of code that you can refer to anywhere in your
				YAML file's event handlers.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Custom commands are prefixed with "$" and the system ships with two
				pre-defined global commands:
				<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-weight="bold">$validate</fo:inline>
						: triggers the input validation logic, if defined
						<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(name=okButton, text=OK, onAction=($validate,save,finishSave))				
				</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-weight="bold">$confim</fo:inline>
						: displays a standard "Are you sure?" confirmation dialog that can
						be invoked before any destructive action:
						<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(name=deleteButton, text=Delete, onAction=($confirm,delete))				
				</fo:block>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10C6C"></fo:inline>
<fo:block font-weight="bold">Adding your own custom commands</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">You need to implement the ICustomCommand interface and add it to your builder's configuration: 
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.getConfig().addCustomCommand("$confirm", new ICustomCommand&lt;Boolean&gt;() {
        public Boolean process(BuildResult result, Object source) {
                Component c = null;
                if (result.getCaller() instanceof Component) {
                        c = (Component) result.getCaller();
                }
                int value = JOptionPane.showConfirmDialog(c, Builder.getResourceBundle().getString("question.areYouSure"), 
                                Builder.getResourceBundle().getString("title.confirmation"), JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                
                if (value == JOptionPane.YES_OPTION) {
                        return true;
                } else {
                        return false;
                }
        }
});				
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N1C0006"></fo:inline>Build events</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10CB1"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				If you need to hook up some custom pre- or post-processing every
				time a build is executed (e.g. to integrate a 3rd party library like
				<fo:inline color="blue">
<fo:basic-link external-destination="https://javacss.dev.java.net/">
					JavaCSS</fo:basic-link>
</fo:inline>
				, you can add a listener to the builder), preferably in your
				<fo:inline font-family="Courier">main()</fo:inline>
				method , e.g.:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
//event listeners
SwingJavaBuilder.getConfig().addBuildListener(new BuildAdapter() {
        @Override
        public void buildStarted(BuildEvent evt) {
                System.out.println(("Build started from caller: " + evt.getSource()));
        }
        @Override
        public void buildEnded(BuildEvent evt) {
                System.out.println(("Build ended for root object: " + evt.getResult().getRoot()));
        }
});				
				</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10CCF"></fo:inline>
<fo:block font-weight="bold">Processing the proper object</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In the <fo:inline font-family="Courier">buildStarted</fo:inline> event you should access <fo:inline font-family="Courier">evt.getSource()</fo:inline>,
				which refers to the caller that initiated the build (i.e. your Java
				class). However, in the <fo:inline font-family="Courier">buildEnded</fo:inline> event it is better to access
				<fo:inline font-family="Courier">evt.getResult().getRoot()</fo:inline>, which is the root object that was created
				from the build file.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The two are not necessarily the same (e.g. in order to create a
				JPanel from a YAML file your Java-side class does not have to extend
				JPanel at all, it is optional). This is useful in toolkits like SWT that do not
				allow you to extend particular component types.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N1D0006"></fo:inline>Hot deployment of UI components</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10D2B"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In order to further maximize developer productivity, all the
				JavaBuilders come with support for dynamically updating components
				while running the application. This means you can edit your YAML
				files and preview them in your app by just re-opening the
				panel/dialog being edited, without the need to restart the whole
				application.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				In order to do this you need to pass the
				<fo:inline font-family="Courier">"javabuilders.dev.src"</fo:inline>
				property to the Java VM on program startup and have it point to the
				relative path where your source code is vs. the compiled .class
				files.
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				In Eclipse, where the classes are in "bin" and the source code
				usually in "src" you need to pass this VM argument in your run
				configuration:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
-Djavabuilders.dev.src=../src				
				</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">That's it! Now the builder will read the YAML files from the
				source folder, instead of the bin folder, meaning you can keep
				editing them while the app is running and immediately see the
				changes as soon as you re-open the current component you were
				working on.</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N1E0006"></fo:inline>Swing Features</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Now that we've seen the core JavaBuilders's features, let's explore what the Swing JavaBuilder
		provides on top of that for building actual Swing user interfaces.</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N1F0006"></fo:inline>Overview</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10E31"></fo:inline>
<fo:block font-weight="bold">Swing JavaBuilder</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">The Swing JavaBuilder is an instance of the JavaBuilders engine, pre-configured
			for use with the Swing UI toolkit. It is represented by the main class 
			<fo:inline font-family="Courier">org.javabuilders.swing.SwingJavaBuilder</fo:inline> and in most typical
			cases that is the only class you will be dealing with.
			<fo:block font-weight="bold">Java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public class MyFrame extends JFrame {
    private BuildResult result = SwingJavaBuilder.build(this);
    public MyFrame() {}
}			
			</fo:block>
			The returned <fo:inline font-family="Courier">BuildResult</fo:inline> obtain contains a reference to the
			various objects that were created during the build process, but it is often
			not necessary to interact with it at all (unless you are doing something more
			complex or custom).
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10E53"></fo:inline>
<fo:block font-weight="bold">General handling of component properties</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				In most cases there is a simple one-to-one mapping between the
				properties of Swing components and how they are set in the YAML
				file, e.g. a
				<fo:inline font-family="Courier">JTextField.text</fo:inline>
				property in YAML is simply
				<fo:inline font-family="Courier">JTextField(text=Some Text)</fo:inline>.
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em"> However, some components have been enhanced in the Swing
				JavaBuilder to make instantiating and using them even easier.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N200006"></fo:inline>Actions and menus</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10EA3"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Creating actions and menus for any application is one of
				the most cumbersome and time consuming tasks in Swing development.
				Fortunately enough, the Swing JavaBuilder delivers a whole slew of
				productivity enhancements in this area that makes creating menus a
				breeze.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10EAC"></fo:inline>
<fo:block font-weight="bold">Text, accelerators and mnemonics</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Whether you are dealing with an
				<fo:inline font-family="Courier">Action</fo:inline>
				or a
				<fo:inline font-family="Courier">JMenuItem</fo:inline>
				, you can handle defining all these 3 properties in one simple text
				value, where the mnemonic is indicated via a
				<fo:inline font-family="Courier">"&amp;"</fo:inline>
			prefix and the accelerator is typed in manually after a <fo:inline font-family="Courier">"\t"</fo:inline> tab
			indicator (similar to the way it is done in SWT), e.g.
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JMenuItem(text="&amp;Save\tCtrl+S")			
			</fo:block>
			The sample above sets the text to "Save", the mnemonic on the "S" character and the 
			accelerator to "Ctrl+S".
			</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Valid accelerators are:
			<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>1. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Ctrl</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>2. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Alt</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>3. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Shift</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>4. 
          </fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>Meta</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
			followed by the appropriate character. They can be mixed together, e.g. "Ctrl+Alt+N".
			Due to the embedded "\t", such menu definitions have to be escaped into quoted text, as per the example above. 
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10EF7"></fo:inline>
<fo:block font-weight="bold">Actions</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">The regular Swing Action API has been modified separately to separate the 
			concept of "name" vs "text" (which are the same in the Action API, but we treat 
			them separately so that the text can be easily internationalized, without affecting the name).
			It provides <fo:inline font-family="Courier">name, text, toolTipText, icon</fo:inline> properties and the name
			of the Java method to be invoked is defined in the <fo:inline font-family="Courier">onAction</fo:inline> handler.
			<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
Action(name=newAction, text=menu.file.new, icon=images/document-new.png, onAction=onFileNew)			
			</fo:block>
<fo:block font-weight="bold">Java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
 private void onFileNew() {
         System.out.print("onFileNew was invoked!");
 }			
			</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			Any descendant of <fo:inline font-family="Courier">AbstractButton</fo:inline> (such as <fo:inline font-family="Courier">JMenuItem</fo:inline>
			or <fo:inline font-family="Courier">JButton</fo:inline> can then refer to it in its <fo:inline font-family="Courier">action</fo:inline> property, e.g.:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(title=frame.title, state=max, defaultCloseOperation=exitOnClose):
    - Action(name=newAction, text=menu.file.new, toolTipText=menu.file.new.tooltip, icon=images/document-new.png, onAction=onFileNew)
    - Action(name=openAction, text=menu.file.open, toolTipText=menu.file.open.tooltip, icon=images/document-open.png, onAction=onFileOpen)
    - Action(name=saveAction, text=menu.file.save, toolTipText=menu.file.save.tooltip, icon=images/document-save.png, onAction=onSave)
    - Action(name=exitAction, text=menu.file.exit, icon=images/process-stop.png, onAction=($confirm,exit))
    - Action(name=option1Action, text=menu.option1, onAction=option1)
    - Action(name=helpAboutAction,text=menu.help.about,onAction=onHelpAbout)
    - JMenuBar:
        - JMenu(name=fileMenu,text=menu.file):
            - JMenuItem(action=newAction)
            - JMenuItem(action=openAction)            
            - JSeparator()
            - JMenuItem(action=saveAction)
            - JSeparator()
            - JMenuItem(action=exitAction)
        - JMenu(name=optionsMenu, text=menu.options):
            - JRadioButtonMenuItem(name=radio1Menu, action=option1Action)
            - JRadioButtonMenuItem(name=radio2Menu, text=menu.option2)
            - JRadioButtonMenuItem(name=radio3Menu, text=menu.option3)
            - ButtonGroup: [radio1Menu, radio2Menu, radio3Menu]
            - JSeparator()
            - JCheckBoxMenuItem(text=menu.option1, onAction=option1)
            - JCheckBoxMenuItem(text=menu.option2)
            - JCheckBoxMenuItem(text=menu.option3)
        - JMenu(name=helpMenu,text=menu.help):
            - JMenuItem(action=helpAboutAction)			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10F42"></fo:inline>
<fo:block font-weight="bold">JMenuBar and JMenuItem</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">If you do not wish to use Actions, you can create menus by directly specifying the relevant
			properties on JMenuBar and JMenuItem instances:
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(title=frame.title, iconImage=images/system-lock-screen.png):
    - JMenuBar:
        - JMenu(name=fileMenu,text=menu.file):
            - JMenuItem(name=newMenu, text=menu.file.new, onAction=onFileNew)
            - JMenuItem(name=openMenu, text=menu.file.open, onAction=onFileOpen)            
            - JSeparator()
            - JMenuItem(name=exitMenu, text=menu.file.exit, onAction=exit)
        - JMenu(name=optionsMenu, text=menu.options):
            - JRadioButtonMenuItem(name=radio1Menu, text=menu.option1, onAction=option1)
            - JRadioButtonMenuItem(name=radio2Menu, text=menu.option2)
            - JRadioButtonMenuItem(name=radio3Menu, text=menu.option3)
            - ButtonGroup: [radio1Menu, radio2Menu, radio3Menu]
            - JSeparator()
            - JCheckBoxMenuItem(text=menu.option1, onAction=option1)
            - JCheckBoxMenuItem(text=menu.option2)
            - JCheckBoxMenuItem(text=menu.option3)
        - JMenu(name=helpMenu,text=menu.help):
            - JMenuItem(name=helpAboutMenu,text=menu.help.about,onAction=onHelpAbout)
</fo:block>			
However, we recommend you always use Actions instead.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10F57"></fo:inline>
<fo:block font-weight="bold">JPopupMenu</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Popup menus can easily be added to any Swing component by simply specifying the 
				<fo:inline font-family="Courier">"popupMenu"</fo:inline> property to point to an existing 
				<fo:inline font-family="Courier">JPopupMenu</fo:inline> instance by name. The Swing JavaBuilder takes care 
				of all the mouse event wiring to popup the menu upon right-click.
				<fo:block font-weight="bold">With actions</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- Action(name=copyAction, text=menu.edit.copy, onAction=copy)
- Action(name=pasteAction, text=menu.edit.paste, onAction=paste)
- JPopupMenu(name=popup):
    - JMenuItem(action=copyAction)
    - JMenuItem(action=pasteAction)
- JTabbedPane(name=tabs, onChange=onTabChanged):
     - JPanel(name=frameYamlSource, tabTitle=tab.frameYamlSource):
         - JScrollPane(name=scroll1): 
               JTextArea(name=frameSourceArea, popupMenu=popup)				
				</fo:block>
<fo:block font-weight="bold">Without actions</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- JPopupMenu(name=popup):
    - JMenuItem(name=popupCopy, text=Copy, onAction=copy)
    - JMenuItem(name=popupPaste, text=Paste, onAction=paste)
- JTabbedPane(name=tabs, onChange=onTabChanged):
     - JPanel(name=frameYamlSource, tabTitle=tab.frameYamlSource):
         - JScrollPane(name=scroll1): 
               JTextArea(name=frameSourceArea, popupMenu=popup)
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N210006"></fo:inline>Borders</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10FB0"></fo:inline>
<fo:block font-weight="bold">Regular Borders</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Any Swing component that allows setting of borders can do it by
				using a set of pre-defined constants:
				<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">loweredBevel</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">raisedBevel</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">loweredEtched</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">raisedEtched</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel(name=panel1, border=raisedBevel)
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N10FEC"></fo:inline>
<fo:block font-weight="bold">Color and Line borders</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Borders can also be specified using just a line width or a Color /
				line width combination:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- JPanel(name=panel1, border=3)
- JPanel(name=panel1, border=olive 3)
- JPanel(name=panel1, border=ff00ee 3)
		</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11000"></fo:inline>
<fo:block font-weight="bold">Titled Border</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				A titled border is a special case, since it has a text associated
				with it. In this case, there is a special property that will
				automatically create a TitledBorder and put the proper text in it,
				namely
				<fo:inline font-family="Courier">groupTitle</fo:inline>
				:
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel(name=groupBox1, groupTitle=Customer Data):
    content:
        - JLabel(name=nameLabel, text="Customer name:")
        - JText(name=nameField)			
		</fo:block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  <fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
<fo:inline font-family="Courier">groupTitle</fo:inline>
						is internationalizable, so you can pass a resource key to it,
						instead of a hard-coded String.
					</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N220006"></fo:inline>Button Group</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11059"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				In order to create a ButtonGroup you just need to define it as a
				collection and pass it the names of buttons that define a group.
				This works for both regular radio buttons as well as radio button
				menu items.
				<fo:block font-weight="bold">Radio buttons</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- JPanel(name=controls):
    - JRadioButton(name=rb1,text=Radio button 1)
    - JRadioButton(name=rb2,text=Radio button 2,selected=true)
    - ButtonGroup: [rb1,rb2]
			</fo:block>
<fo:block font-weight="bold">Radio button menu items</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- JMenu(name=optionsMenu, text=menu.options):
    - JRadioButtonMenuItem(name=radio1Menu, text=menu.option1, onAction=option1)
    - JRadioButtonMenuItem(name=radio2Menu, text=menu.option2)
    - JRadioButtonMenuItem(name=radio3Menu, text=menu.option3)
    - ButtonGroup: [radio1Menu, radio2Menu, radio3Menu]	
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N230006"></fo:inline>Colors</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N110A1"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			Colors can be specified using a standard HTML/CSS style syntax. Valid values are:
			<fo:block font-weight="bold">Hex Color</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTextArea(name=textArea, background=ff00ee)			
			</fo:block>
<fo:block font-weight="bold">Short hex color (e.g. f0e gets interpreted as ff00ee)</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTextArea(name=textArea, background=f0e)			
			</fo:block>
<fo:block font-weight="bold">HTML color name (case-insensitive)</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTextArea(name=textArea, background=olive)		
			</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  <fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">HTML color names:
			<fo:inline color="blue">
<fo:basic-link external-destination="http://www.w3schools.com/html/html_colornames.asp">http://www.w3schools.com/html/html_colornames.asp</fo:basic-link>
</fo:inline>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N240006"></fo:inline>Fonts</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11101"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Fonts can be specified using a CSS-like syntax: "bold|italic size
				name": 
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JButton(font=italic)
JButton(font=italic bold)
JButton(font=italic 14pt)
JButton(font=Arial)
JButton(font=italic bold 14pt Arial)
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N250006"></fo:inline>Icons and images</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11141"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Any Swing API that expects an Icon or Image can be expressed by
				simply putting in the image path, relative to the caller class that
				initiated the build process.
				<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JMenuItem(text=menu.save, icon=images/document-save.png)
</fo:block>
				Alternatively, if you initialized the builder with a <fo:inline font-family="Courier">ResourceBundle</fo:inline> to activate internationalization,
				you can pass a resource key instead. The builder will look for the path to the image via the key in the bundle instead, e.g.
				<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JMenuItem(text=menu.save, icon=images.saveDocument)
				</fo:block>
<fo:block font-weight="bold">Properties file</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
images.saveDocument=/myapp/resources/images/document-save.png			
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N260006"></fo:inline>JComboBox</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11197"></fo:inline>
<fo:block font-weight="bold">Databinding</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">In order to bind a <fo:inline font-family="Courier">List</fo:inline> to a JComboBox, you need to bind it to its <fo:inline font-family="Courier">model</fo:inline>
          property, e.g.
          <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
bind:
    - jComboBox.model: this.books          
          </fo:block>
          An alternate (and arguably more powerful) databinding method involves using the GlazedLists library, 
          please refer to the relevant chapter for more details.
          </fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N270006"></fo:inline>JFrame</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N111E9"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
<fo:inline font-family="Courier">JFrame</fo:inline>
				support in the Swing JavaBuilder adds custom processing for the
				following properties:
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N111F7"></fo:inline>
<fo:block font-weight="bold">size</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Can be in "width_x_height" format (e.g. 800x400) or
				<fo:inline font-family="Courier">"packed"</fo:inline>
				to indicate the
				<fo:inline font-family="Courier">JFrame.pack()</fo:inline>method should be called at the end 
(after all the child components have been added), e.g.
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(size=800x400)
JFrame(size=packed)
</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11217"></fo:inline>
<fo:block font-weight="bold">state</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Allows setting the extended state of a frame, valid values are: 
			<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">max</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">maxh</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">maxv</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">icon</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(state=max)			
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N280006"></fo:inline>JList</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11284"></fo:inline>
<fo:block font-weight="bold">Databinding</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">In order to bind a <fo:inline font-family="Courier">List</fo:inline> to a JList, you need to bind it to its <fo:inline font-family="Courier">model</fo:inline>
          property, e.g.
          <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
bind:
    - jList.model: this.books         
          </fo:block>
          An alternate (and arguably more powerful) databinding method involves using the GlazedLists library, 
          please refer to the relevant chapter for more details.
          </fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N290006"></fo:inline>JScrollPane</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N112D6"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
		Used to wrap components in a scrollable pane. Since it only has one child underneath, it
		is entered not as a YAML list, but a single item:
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JScrollPane(name=scrollPane1, verticalScrollBarPolicy=asNeeded, horizontalScrollBarPolicy=asNeeded):
     JTextArea(name=textArea)		
		</fo:block>
		You can also use the shorter <fo:inline font-family="Courier">vScrollBar</fo:inline> and <fo:inline font-family="Courier">hScrollBar</fo:inline>
		aliases:
		<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JScrollPane(name=scrollPane1, vScrollBar=asNeeded, hScrollBar=asNeeded):
     JTextArea(name=textArea		
		</fo:block>
		Valid values for both properties are:
		<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">always</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">asNeeded</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">never</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N2A0006"></fo:inline>JSplitPane</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11349"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em"> In order to use a JSplitPane just list the child components
				underneath it. The first two will be automatically added as the
				left/right (or top/bottom) panes,e.g.:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JSplitPane(name=split1,orientation=verticalSplit):
        - JCustomPanel1(name=panel1)
        - JCustomPanel2(name=panel2)			
			</fo:block>
			The <fo:inline font-family="Courier">orientation</fo:inline> property's <fo:inline font-family="Courier">verticalSplit</fo:inline> or
			<fo:inline font-family="Courier">horizontalSplit</fo:inline> values define the type of split.
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N2B0006"></fo:inline>JTabbedPane</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1139C"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				In order to create tab pages, just list the controls you wants as
				tabs underneath the JTabbedPane node. In order to specify the tab
				title, tooltip and icon use the following properties:
				<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">tabTitle</fo:inline> (localizable)
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">tabToolTip</fo:inline> (localizable)
					</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">tabIcon</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">tabEnabled</fo:inline>
</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
				Those are used only if a component is listed underneath a
				JTabbedPane and are ignored if used anywhere else.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
- JTabbedPane(name=tabs):
    - JPanel(tabTitle=tab.frameYamlSource, tabIcon=images/tab1.png):
				</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N2C0006"></fo:inline>JTable</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11407"></fo:inline>
<fo:block font-weight="bold">Custom Table Models</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
	       You can integrate custom table models into your JTables. First, you must register your custom model (usually in the <fo:inline font-family="Courier">main()</fo:inline>, 
	       so that the Swing JavaBuilder engine is aware of it, e.g.:
	       <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.getConfig().addType(MyCustomTableModel.class);
	       </fo:block>
	       Then you can just refer to it directly:
	       <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JScrollPane(name=scroll2): 
        JTable(name=table1):
            - MyCustomTableModel(name=model)
	       </fo:block>
<fo:block>
<fo:inline font-weight="bold" border-right-width="0pt" border-left-width="0pt">Note: </fo:inline>  Your custom table does not actually need to have <fo:inline font-family="Courier">name</fo:inline> property. If it does not
	       exist, the Swing JavaBuilder will handle it as a virtual property. A named instance
	       of the model (that you can manipulate from the Java code) will be created, e.g.:
	       <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private MyCustomTableModel model;  //reference will be set during build process	       
	       </fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11439"></fo:inline>
<fo:block font-weight="bold">Table Columns</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em"> JTable provides an easy way to create table columns, by just
				specifying a list of TableColumn objects underneath it, e.g.:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JScrollPane(name=scroll2): 
        JTable(name=table1):
            - TableColumn(name=col1,resizable=true, headerValue=Column 1)
            - TableColumn(name=col2,resizable=true, headerValue=Column 2)
            - TableColumn(name=col3,resizable=false, headerValue=Column 3)			
			</fo:block>
			When processing the list of table columns, the builder will evaluate the columns that are there already.
			If it can match based on the <fo:inline font-family="Courier">identifier</fo:inline> or <fo:inline font-family="Courier">headerValue</fo:inline> then it
			will use that existing columns, otherwise it will create a new one and add it to the JTable.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1145A"></fo:inline>
<fo:block font-weight="bold">Cell Editor</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
		      Adding cell editors to a column is very easy. You can either define an explicit <fo:inline font-family="Courier">TableCellEditor</fo:inline>
		      implementation:
		      <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTable(name=table1):
    - TableColumn(name=col1,resizable=true, headerValue=Column 1):
        - MyCustomCellEditor(name=col1Editor)
		      </fo:block>
		      or you can define an explicit <fo:inline font-family="Courier">JCheckBox, JComboBox or JTextField</fo:inline> underneath it. In this
		      case the builder will automatically wrap it with a <fo:inline font-family="Courier">DefaultCellEdior</fo:inline> wrapper:
              <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
 JTable(name=table1):
     - TableColumn(name=col1,resizable=true, headerValue=Column 1):
         - JComboBox(name=col1Box)
     - TableColumn(name=col2,resizable=true, headerValue=Column 2):
         - JCheckBox(name=col2Box)
     - TableColumn(name=col3,resizable=false, headerValue=Column 3):
         - JTextField(name=col3Field)
              </fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11487"></fo:inline>
<fo:block font-weight="bold">Cell Renderer</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
		      Similarly, you can define a <fo:inline font-family="Courier">TableCellRenderer</fo:inline> underneath a column:
		      <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTable(name=table1):
    - TableColumn(name=col1,resizable=true, headerValue=Column 1):
        - MyCustomRenderer(name=col1Renderer)
		      </fo:block>
		      If you want to define a column header renderer, just add a <fo:inline font-family="Courier">forHeader=true</fo:inline> property:
              <fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JTable(name=table1):
    - TableColumn(name=col1,resizable=true, headerValue=Column 1):
        - MyCustomRenderer(name=col1Renderer, forHeader=true)
              </fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N2D0006"></fo:inline>Event handlers</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N114DF"></fo:inline>
<fo:block font-weight="bold">Event handlers</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
				Here's a complete list of event handlers by component type. Next to
				them is also the
				event-specific class that can get passed to your Java method if you require it
				(just remember
				to make it part of the method's signature), e.g.
				<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private void someButtonClicked() {
	//...one valid signature...
}				
				
private void someButtonClicked(ActionEvent evt) {
	//...another valid signature ...
}

private void someButtonClicked(JButton source) {
	//...another valid signature ...
}

private void someButtonClicked(JButton source, Action evt) {
	//...yet another valid signature ...
}
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N114F3"></fo:inline>
<fo:block font-weight="bold">Action</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" font-weight="bold" text-align="center" padding="2pt" background-color="silver" start-indent="2pt" column-number="1">
<fo:block font-size="10pt">Name</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" font-weight="bold" text-align="center" padding="2pt" background-color="silver" start-indent="2pt" column-number="2">
<fo:block font-size="10pt">Event Class</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onAction</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ActionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1151C"></fo:inline>
<fo:block font-weight="bold">(Abstract)Button</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onAction</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ActionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11537"></fo:inline>
<fo:block font-weight="bold">Component</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onFocus</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">FocusEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onFocusLost</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">FocusEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onKeyPressed</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">KeyEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onKeyReleased</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">KeyEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onKeyTyped</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">KeyEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseClicked</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseDoubleClicked</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseDragged</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseEntered</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseExited</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseMoved</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMousePressed</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseReleased</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseRightClicked</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onMouseWheelMoved</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">MouseWheelEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11616"></fo:inline>
<fo:block font-weight="bold">JComboBox</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onAction</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ActionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11631"></fo:inline>
<fo:block font-weight="bold">JFrame</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onStateChanged</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowActivated</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowClosed</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowClosing</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowDeactivated</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowDeiconified</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowFocus</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowFocusLost</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowIconified</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowOpened</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N116CA"></fo:inline>
<fo:block font-weight="bold">JTabbedPane</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onChange</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ChangeEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N116E5"></fo:inline>
<fo:block font-weight="bold">JTable</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onSelection</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ListSelectionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11700"></fo:inline>
<fo:block font-weight="bold">JTextField</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onAction</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">ActionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1171B"></fo:inline>
<fo:block font-weight="bold">JTree</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onSelection</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">TreeSelectionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11736"></fo:inline>
<fo:block font-weight="bold">JTree</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onSelection</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">TreeSelectionEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11751"></fo:inline>
<fo:block font-weight="bold">Window</fo:block>
<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onStateChanged</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowActivated</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowClosed</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowClosing</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowDeactivated</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowDeiconified</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowFocus</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowFocusLost</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowIconified</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">onWindowOpened</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">WindowEvent</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N2E0006"></fo:inline>Swing Layout Management</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Layout management is one of the biggest pain points in any UI development. The Swing JavaBuilder solves
		it by using a simple DSL (Domain Specific Language) that runs on top of the brilliant MigLayout layout manager.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">After using MigLayout you will never go back to any other JDK layout manager, it makes them all obsolete.</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N2F0006"></fo:inline>MigLayout DSL</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1186B"></fo:inline>
<fo:block font-weight="bold">What is MigLayout?</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">MigLayout is a revolutionary layout manager for Swing and SWT, written by Mikael Grev and released
			under the open source BSD license. It revolutionizes layout management by making
			it much more dynamic and thus greatly reducing the number of lines of code one
			has to write, even for very complex layouts.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">MigLayout is available for download from
<fo:inline color="blue">
<fo:basic-link external-destination="http://miglayout.com">http://miglayout.com</fo:basic-link>
</fo:inline>. We recommend to read the Cheat Sheet and introduction to MigLayout
			available on that website. Once you try MigLayout you can never go back to archaic
			layout managers such as GridBagLayout or GroupLayout. It even makes the formidable
			JGoodies Forms layout manager obsolete.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11887"></fo:inline>
<fo:block font-weight="bold">Visual MigLayout DSL syntax (a GUI builder in pure text)</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The visual layout DSL is basically a way to have a GUI builder, but in a pure text format. 
			In short, it allows you to define controls' layout in a text file (by using their names) and from 
			their relative alignments and number of rows, the builder will attempt to automatically figure out 
			how many rows/columns there are, which control goes into which cell, whether it should be 
			left/top/right/center aligned, how many cells should it span, etc.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The layout DSL translates the constraints into standard MigLayout constraints, 
			hence this is basically nothing more than a visual text-based interface to the full power 
			of MigLayout.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1189A"></fo:inline>
<fo:block font-weight="bold">Quick Example</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Let's say we need to create a simple dialog with 3 rows: a table/text field in the first two rows, 
			and OK/Cancel buttons (right aligned) in the last row.
			<fo:block> </fo:block>
<fo:block>
<fo:external-graphic src="url(core/img/miglayout.simple.1.gif)"/>
</fo:block>
<fo:block/>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
MigLayout: |                                          
    [[insets 8]                                    
    [pref]            [grow]                       
    &gt;firstNameLabel   firstName
    &gt;lastNameLabel    lastName
    &gt;okButton+*,cancelButton     [growy, bottom]   
    {okButton: tag OK, cancelButton: tag Cancel}   
			</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
			From this you can probably see right away that we have 3 rows (as in 3 lines of text), the labels are in the same vertical column, the text fields are in the same vertical column (which is flagged to "grow", a standard MigLayout constraint).
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N118B9"></fo:inline>
<fo:block font-weight="bold">General format</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
MigLayout: |
    [[global layout constraints]]                              #optional
    [column constraints]   [another column's constraints]      #optional
    control1               control2                            [row constraint - optional]
    control3               control4
    {control1: specific MigLayout constraint (e.g. baseline) } #optional
</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N118CC"></fo:inline>
<fo:block font-weight="bold">Alignment</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			Goes before the control name, e.g. "&gt;fieldNameLabel". If none are presents it defaults to "top, left".
			<fo:block space-before="12pt">
<fo:table table-layout="fixed" width="100%" space-before="10pt" space-after="10pt" background-color="white" border-style="solid" border-width="1pt" border-color="black">
<fo:table-column/>
<fo:table-column/>
<fo:table-body>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">&lt;</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">horizontally left aligned (can be omitted, it is the default value)</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">&lt;</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">horizontally left aligned (can be omitted, it is the default value)</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">&gt;</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">horizontally right aligned</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">|</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">horizontally centered</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">-</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">vertically centered</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">/</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">vertically bottom aligned</fo:block>
</fo:table-cell>
</fo:table-row>
<fo:table-row>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="1">
<fo:block font-size="9pt">^</fo:block>
</fo:table-cell>
<fo:table-cell border-style="solid" border-width="1pt" border-color="black" padding="2pt" background-color="#fafafa" start-indent="2pt" column-number="2">
<fo:block font-size="9pt">vertically top aligned (usually omitted, use only when needed to override the default, e.g. "baseline" in MigLayout)</fo:block>
</fo:table-cell>
</fo:table-row>
</fo:table-body>
</fo:table>
</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11940"></fo:inline>
<fo:block font-weight="bold">Cell Spanning</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In "+X+Y" format (X= horizontal cells to span, Y= vertical cells to span), e.g. "okButton+2".</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Examples:
			<fo:list-block>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">+*</fo:inline> : horizontally span rest of row (e.g. "okButton+*")</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">+2</fo:inline> : horizontally span 2 cells</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">+2+4</fo:inline>: horizontally span 2 cells, vertically span 4 cells</fo:block>
</fo:list-item-body>
</fo:list-item>
<fo:list-item>
<fo:list-item-label text-align="end" end-indent="label-end()">
<fo:block>
<fo:inline>•</fo:inline>
</fo:block>
</fo:list-item-label>
<fo:list-item-body start-indent="body-start()">
<fo:block>
<fo:inline font-family="Courier">+2+*</fo:inline>: horizontally span 2 cells, vertically span the the rest of the column</fo:block>
</fo:list-item-body>
</fo:list-item>
</fo:list-block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N1197F"></fo:inline>
<fo:block font-weight="bold">Cell Splitting</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In <fo:inline font-family="Courier">"controlName1,controlName2"</fo:inline> format (i.e. control names separated with a comma). 
			Used when you want to place multiple controls into the same cell. All the general cell constraints 
			(alignment, spanning, etc.) are applied to the first control, e.g. <fo:inline font-family="Courier">okButton+*,cancelButton"</fo:inline>.
			</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11999"></fo:inline>
<fo:block font-weight="bold">Size Groups</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In <fo:inline font-family="Courier">"=X"</fo:inline> format (X = size group number), e.g. "okButton=1 cancelButton=1"</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Allows to specify which controls should have the same preferred size. Useful especially when you want different command buttons 
			to have the same size (e.g. OK and Cancel).
			There is also support for horizontal and vertical size groups (i.e. those that apply only to common width and/or height, 
			instead of both), but it's not quite there yet. It is defined by appending an 'x' or 'y' after the size group, e.g.:
			<fo:inline font-family="Courier">okButton=1x cancelButton=1x`</fo:inline>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N119B7"></fo:inline>
<fo:block font-weight="bold">String Literal Controls</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">In order to further simplify the creation of user interfaces, the DSL allows you to enter string literals (embedded in double quotes) instead of control names.
		  Such entries will automatically be interpreted as labels (e.g. JLabel for Swing, Label for SWT, etc.) and an underlying control will be created without the need
		  to manually specify it in the YAML.</fo:block>
<fo:block font-weight="bold">Using string literal controls</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame, title=frame.title, size=packed, defaultCloseOperation=exitOnClose):
    - JTextField(name=fName)
    - JTextField(name=lName)
    - JTextField(name=email)
    - JButton(name=save, text=button.save, onAction=($validate,save,done))
    - JButton(name=cancel, text=button.cancel, onAction=($confirm,cancel))
    - MigLayout: |
        [pref]             [grow,100] [pref]           [grow,100] 
        "label.firstName"  fName      "label.lastName" lName
        "label.email"      email+*
        &gt;save+*=1,cancel=1          
          </fo:block> 
          or the more verbose, traditional way:
          <fo:block font-weight="bold">Using explicit label definitions</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(name=frame, title=frame.title, size=packed, defaultCloseOperation=exitOnClose):
    - JLabel(name=fNameLbl, text=label.firstName)
    - JLabel(name=lNameLbl, text=label.lastName)
    - JLabel(name=emailLbl, text=label.email)
    - JTextField(name=fName)
    - JTextField(name=lName)
    - JTextField(name=email)
    - JButton(name=save, text=button.save, onAction=($validate,save,done))
    - JButton(name=cancel, text=button.cancel, onAction=($confirm,cancel))
    - MigLayout: |
        [pref]    [grow,100]  [pref]   [grow,100] 
        fNameLbl  fName       lNameLbl lName
        emailLbl  email+*
        &gt;save+*=1,cancel=1          
        </fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N119D4"></fo:inline>
<fo:block font-weight="bold">Complex Example</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
				From John O'Conners Layout Manager Challenge: 
				<fo:inline color="blue">
<fo:basic-link external-destination="http://weblogs.java.net/blog/joconner/archive/2006/10/layout_manager.html">http://weblogs.java.net/blog/joconner/archive/2006/10/layout_manager.html</fo:basic-link>
</fo:inline>
<fo:external-graphic src="url(core/img/addressbookdemo_mac.gif)"/>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">Here's how it would look implemented in the Swing JavaBuilder:
			<fo:external-graphic src="url(core/img/miglayout.complex.1.gif)"/>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JScrollPane(name=scroll1): JTextArea(name=source,font=Monospaced,editable=false)
    - JTextField(name=lName)
    - JTextField(name=fName)
    - JTextField(name=phone)
    - JTextField(name=email)
    - JTextField(name=address1)
    - JTextField(name=address2)
    - JTextField(name=city)
    - JTextField(name=state)
    - JTextField(name=postal)
    - JTextField(name=country)
    - JButton(name=newBtn, text=New)
    - JButton(name=deleteBtn, text=Delete)
    - JButton(name=editBtn, text=Edit)
    - JButton(name=saveBtn, text=Save)
    - JButton(name=cancelBtn, text=Cancel)
    - MigLayout: |
       [200,grow]      [right]       [200,grow]                  [200,grow]
       scroll1+1+*     "Last name:"  lName       "First Name"    fName                              
                       "Phone:"      phone       "Email:"+2,email               
                       "Address 1:"  address1+*                                  
                       "Address 2:"  address2+*                                  
                       "City:"       city                       
                       "State:"      state       "Postal Code:"  postal
                       "Country:"    country                                   
                       ^|newBtn+*=1,^deleteBtn=1,^editBtn=1,^saveBtn=1,^cancelBtn=1  [grow]
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N300006"></fo:inline>MigLayout</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11A2D"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			If for whatever reason you do not want to use the MigLayout DSL, you can still use regular MigLayout
			properties and syntax, e.g.:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JFrame(title=My Frame):
    content:
        - JLabel(name=firstNameLabel,text=First Name)
        - JTextField(name=firstName)
        - JLabel(name=lastNameLabel,text=Last Name)
        - JTextField(name=lastName)
        - JButton(name=okButton)
        - MigLayout:
            layoutConstraints: wrap 2          #general layout constraints
            columnConstraints: [] [grow] []    #general column constraints
            rowConstraints: [] [] []           #general row constraints
            constraints:
                - firstNameLabel: right
                - firstName: 200px, sg 1
                - lastNameLabel: right
                - lastName: 200px, sg 1
                - okButton: span, right, tag ok			
			</fo:block>
			But we recommend you always use the DSL syntax instead, it's much more powerful and easier to
			use after the initial learning curve.
			</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N310006"></fo:inline>CardLayout</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11A69"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
			CardLayout support is provided by adding a CardLayout node at the end of the list of child components, e.g.
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JPanel(name=panel1)
    - JPanel(name=panel2)
    - CardLayout(name=cards): [panel1,panel2]			
			</fo:block>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
By default the card name is the same as the name of the control that was added as a card. 
Using the "name" property you can get a handle to the created instance of CardLayout in your Java-side code, e.g.
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
private CardLayout cards;
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N320006"></fo:inline>FlowLayout</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11AAF"></fo:inline>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
In order to use FlowLayout, just create a FlowLayout node at the end of the list of child components. 
No need to specify which ones to add, they all get added automatically, e.g.:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
   - JPanel(name=panel1,groupTitle=Flow layout components):
      - JLabel(text=Label 1)
      - JButton(text=Button 1)
      - JLabel(text=Label 2)
      - JButton(text=Button 2)
      - JLabel(text=Label 3)
      - JButton(text=Button 4)
      - JLabel(text=Label 5)
      - JButton(text=Button 5)
      - FlowLayout(alignment=left,hgap=30,vgap=30,alignOnBaseline=true)			</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N330006"></fo:inline>GlazedLists databinding for list controls</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11AEA"></fo:inline>
<fo:block font-weight="bold">GlazedLists</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
	       GlazedLists is a best-of-breed open source library geared towards making databinding, sorting and filtering
	       for Swing and SWT controls easier and more productive.
	       For a full overview on how GlazedList works, please visit their website:
	       <fo:inline color="blue">
<fo:basic-link external-destination="http://publicobject.com/glazedlists/">http://publicobject.com/glazedlists/</fo:basic-link>
</fo:inline>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
	       In particular, check out their detailed tutorial:
	       <fo:inline color="blue">
<fo:basic-link external-destination="https://docs.google.com/Doc?id=dc5md22b_0g456kwd8">https://docs.google.com/Doc?id=dc5md22b_0g456kwd8</fo:basic-link>
</fo:inline>
	       and screencasts:
	       <fo:inline color="blue">
<fo:basic-link external-destination="http://publicobject.com/glazedlists/media/Glazed_Lists_in_25_lines_of_code.mov">http://publicobject.com/glazedlists/media/Glazed_Lists_in_25_lines_of_code.mov</fo:basic-link>
</fo:inline>
</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
	       Below you will find information on how GlazedLists are integrated into the JavaBuilders library.
	       </fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N340006"></fo:inline>JComboBox</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11B54"></fo:inline>
<fo:block font-weight="bold">EventComboBoxModel</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
	       The <fo:inline font-family="Courier">JComboBox</fo:inline>-specific model in GlazedLists is called <fo:inline font-family="Courier">EventComboBoxModel</fo:inline>.
	       You will need to define a GlazedLists <fo:inline font-family="Courier">EventList</fo:inline> in your Java code to hold the master
	       list of objects and point the <fo:inline font-family="Courier">EventComboBoxModel.source</fo:inline> property in the YAML file to it.
	       <fo:block font-weight="bold">Java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public class GlazedListJListPanel extends JPanel {

    private EventList&lt;String&gt; values = new BasicEventList&lt;String&gt;();
    private BuildResult result;
    
    public GlazedListJListPanel() {
        result = SwingJavaBuilder.build(this);
    }
}
	       </fo:block>
<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JComboBox(name=box): 
        EventComboBoxModel(name=model,source=values)	       
	       </fo:block>
	       When you add/remove items in your <fo:inline font-family="Courier">EventList</fo:inline>, they will automatically be propagated to the
	       <fo:inline font-family="Courier">JComboBox</fo:inline>
<fo:inline font-family="Courier">EventComboBoxModel</fo:inline>.
	       </fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N350006"></fo:inline>JList</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11BC6"></fo:inline>
<fo:block font-weight="bold">EventListModel</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">
	       The <fo:inline font-family="Courier">JList</fo:inline>-specific model in GlazedLists is called <fo:inline font-family="Courier">EventListModel</fo:inline>.
	       You will need to define a GlazedLists <fo:inline font-family="Courier">EventList</fo:inline> in your Java code to hold the master
	       list of objects and point the <fo:inline font-family="Courier">EventListModel.source</fo:inline> property in the YAML file to it.
	       <fo:block font-weight="bold">Java</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
public class GlazedListJListPanel extends JPanel {

    private EventList&lt;String&gt; values = new BasicEventList&lt;String&gt;();
    private BuildResult result;
    
    public GlazedListJListPanel() {
        result = SwingJavaBuilder.build(this);
    }
}
	       </fo:block>
<fo:block font-weight="bold">YAML</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
JPanel:
    - JList(name=list): 
        EventListModel(name=model,source=values)	       
	       </fo:block>
	       When you add/remove items in your <fo:inline font-family="Courier">EventList</fo:inline>, they will automatically be propagated to the
	       <fo:inline font-family="Courier">JList</fo:inline>
<fo:inline font-family="Courier">EventListModel</fo:inline>.
	       </fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N360006"></fo:inline>Extending the JavaBuilders engine</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11C3D"></fo:inline>
<fo:block font-weight="bold">Overview</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">The core JavaBuilders engine is domain-agnostic, i.e. there is no logic in it
			specific to any particular toolkit such as Swing or SWT. Each of domain-specific
			builders (such as the Swing JavaBuilder or the SWT JavaBuilder) are just thin proxies
			for the common <fo:inline font-family="Courier">Builder</fo:inline> APIs which pass along a pre-configured instance of a 
			<fo:inline font-family="Courier">BuilderConfig</fo:inline> object, which contains all the component types
			and custom handlers for each UI toolkit.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">This builder configuration object is usually exposed via the static <fo:inline font-family="Courier">getConfig()</fo:inline>
			method on the builder, e.g. <fo:inline font-family="Courier">SwingJavaBuilder.getConfig()</fo:inline>.</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">By manipulating its properties you can change the default configuration, register
			new object types, customized handlers for particular controls or particular properties
			of a control.</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11C6D"></fo:inline>
<fo:block font-weight="bold">Registering new component types</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0em" space-after="0.6em">All you need to do is call the <fo:inline font-family="Courier">BuilderConfig.addType(Class clazz)</fo:inline>
			method, presumably from your application's <fo:inline font-family="Courier">main()</fo:inline>:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.getConfig().addType(MyCustomComponent.class);
			</fo:block>			
			and then you can start referring to it directly in the YAML file:
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
MyCustomClass(property1=value1,property2=value2, etc...)			
			</fo:block>
			You can also add it with a specific alias to avoid name collision (by default it takes the simple class name): 
			<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
SwingJavaBuilder.getConfig().addType("CustomClassAlias",MyCustomClass.class);
			</fo:block>
<fo:block space-before="1.2em" space-after="0.8em" white-space-treatment="preserve" white-space-collapse="false" linefeed-treatment="preserve" wrap-option="wrap" background-color="#f0f0f0" font-family="Courier" line-height="106%" font-size="8pt">
CustomClassAlias(property1=value1,property2=value2, etc...)			
			</fo:block>
</fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11CA1"></fo:inline>
<fo:block font-weight="bold">Customizing object creation : ITypeHandler</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">If you need to write your own custom creation code for a class instance (e.g. for a control that has
		  a constructor that expects parameters during initialization), you need to implement an instance of
		  <fo:inline font-family="Courier">ITypeHandler</fo:inline>, usually by extending <fo:inline font-family="Courier">AbstractTypeHandler</fo:inline>. 
		  It needs to be then registered for the class-specific <fo:inline font-family="Courier">TypeDefinition</fo:inline> object within
		  the <fo:inline font-family="Courier">BuilderConfig</fo:inline> instance.
		  </fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11CC7"></fo:inline>
<fo:block font-weight="bold">Customizing initialization logic: ITypeHandlerAfterCreationProcessor</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">
		  If your object does not need special constructor logic, but just some post-creation initialization, then
		  you need to implement the simple <fo:inline font-family="Courier">IAfterCreationProcessor</fo:inline> interface and register it 
		  with your type's <fo:inline font-family="Courier">TypeDefinition</fo:inline>. It's logic will be executed after the object is created,
		  but before any children get processed.
		  </fo:block>
</fo:block>
<fo:block line-height="12pt" space-before="0.6em" font-size="10pt">
<fo:inline id="N11CE1"></fo:inline>
<fo:block font-weight="bold">Customizing post-processing of children nodes; ITypeHandlerFinishProcessor</fo:block>
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">If you need to inject some logic after a parent's child nodes have been all processed, you need to
		  implement the <fo:inline font-family="Courier">ITypeHandlerFinishProcessor</fo:inline> interface and add it to the appropriate
		  <fo:inline font-family="Courier">TypeDefinition</fo:inline> object.</fo:block>
</fo:block>
</fo:block>
</fo:block>
<fo:block>
<fo:block break-before="page" margin-top="0pc" margin-bottom="1.4pc" font-size="16pt" font-weight="bold" padding-top="1.4pc">
<fo:block border-right-width="0pt" border-left-width="0pt" line-height="100%" border-top-width="3pt" border-top-color="black">
<fo:inline id="N370006"></fo:inline>Appendix</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt"/>
<fo:block>
<fo:block padding-top="1pc" margin-bottom="5pt" font-size="14pt" font-weight="bold">
<fo:block border-right-width="0pt" border-left-width="0pt" border-top-width="1pt" border-top-color="black">
<fo:inline id="N390006"></fo:inline>Layout Samples</fo:block>
</fo:block>
<fo:block start-indent="4pt" font-size="10pt">
<fo:block font-size="10pt" text-indent="0em" space-before="0.6em" space-after="0.6em">Layout Samples</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:block>
</fo:flow>
</fo:page-sequence>
</fo:root>
